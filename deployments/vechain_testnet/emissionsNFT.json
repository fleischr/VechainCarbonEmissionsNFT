{
  "address": "0x0F7666508Ca42b92aB81B525A818F11492d057f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anchorContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dataStewardAddress",
          "type": "address"
        }
      ],
      "name": "dataStewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "smartContractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        }
      ],
      "name": "emissionsTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "smartContractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adjustmentID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenVerificationID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifierDID",
          "type": "address"
        }
      ],
      "name": "emissionsTokenVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifierDID",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ghgOrgID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "verifyingOrgID",
          "type": "string"
        }
      ],
      "name": "emissionsVerifierAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "ghgOrgId",
          "type": "string"
        }
      ],
      "name": "ghgOrgCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "scope1ContractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "scope3ContractAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "scope1ghgOrgID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "scope3ghgOrgID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "scope1TokenID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "scope3TokenID",
          "type": "uint32"
        }
      ],
      "name": "reenlistVerifiersForScope3",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "scope1contract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "scope3contract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "scope1GHGOrgID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "scope3GHGOrgID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "scope1TokenID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "scope3TokenID",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scope1TokenVerificationID",
          "type": "uint256"
        }
      ],
      "name": "scope3referenced",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_targetToken",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_fromDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toDateTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_co2eAmount",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "_emissionsOrigin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_publicIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_protectedIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_sapcapDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_emissionsVaultID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ghgOrgID",
          "type": "string"
        },
        {
          "internalType": "enum iEmissionsNFT.carbonScopeLevel",
          "name": "_scopeLevel",
          "type": "uint8"
        }
      ],
      "name": "addEmissionsData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_targetToken",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenVerificationID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_verifierDID",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_verifierSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_verifiedOn",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_currentAdjustmentID",
          "type": "uint16"
        }
      ],
      "name": "addEmissionsVerification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPedsByTokenID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "fromDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toDateTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "co2eAmount",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "emissionsOrigin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "publicIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "protectedIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sapcapDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "emissionsVaultID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "adjustmentID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reportingGHGOrgID",
          "type": "string"
        },
        {
          "internalType": "enum iEmissionsNFT.carbonScopeLevel",
          "name": "scopeLevel",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "anchorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierDID",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ghgOrgID",
          "type": "string"
        }
      ],
      "name": "approveVerifierRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDataSteward",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ghgOrgID",
          "type": "string"
        }
      ],
      "name": "autoApproveDataSteward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dataStewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "dataStewardAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "acknowledDataSteward",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "addedBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ghgOrgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dataStewardsByAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "dataStewardAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "acknowledDataSteward",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "addedBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ghgOrgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ghgOrganizationID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ghgOrganizationName",
          "type": "string"
        }
      ],
      "name": "defineGHGOrg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "determineMintReadiness",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emissionsVerifiers",
      "outputs": [
        {
          "internalType": "address",
          "name": "emissionsVerifierAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "acknowledgedVerifer",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "requestedBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addedBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "subjectGHGOrgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "verificationOrgID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "acknowledgedOn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "emissionsVerifiersByAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "emissionsVerifierAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "acknowledgedVerifer",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "requestedBy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addedBy",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "subjectGHGOrgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "verificationOrgID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "acknowledgedOn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllEmissionsData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tokenID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "fromDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toDateTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "co2eAmount",
              "type": "int256"
            },
            {
              "internalType": "address",
              "name": "emissionsOrigin",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "publicIPFSCID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "protectedIPFSCID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sapcapDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "emissionsVaultID",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "adjustmentID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reportingGHGOrgID",
              "type": "string"
            },
            {
              "internalType": "enum iEmissionsNFT.carbonScopeLevel",
              "name": "scopeLevel",
              "type": "uint8"
            }
          ],
          "internalType": "struct iEmissionsNFT.emissionsData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_tokenID",
          "type": "uint32"
        }
      ],
      "name": "getEmissionsDataByTokenID",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tokenID",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "fromDateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "toDateTime",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "co2eAmount",
              "type": "int256"
            },
            {
              "internalType": "address",
              "name": "emissionsOrigin",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "publicIPFSCID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "protectedIPFSCID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sapcapDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "emissionsVaultID",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "adjustmentID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "reportingGHGOrgID",
              "type": "string"
            },
            {
              "internalType": "enum iEmissionsNFT.carbonScopeLevel",
              "name": "scopeLevel",
              "type": "uint8"
            }
          ],
          "internalType": "struct iEmissionsNFT.emissionsData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextTokenID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_tokenID",
          "type": "uint32"
        }
      ],
      "name": "getTokenVerifications",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tokenID",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "tokenVerificationID",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "verifierDID",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "verifierSignature",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "verifiedOnDateTime1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verifiedOnDateTime2",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "verificationCount",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "currentAdjustmentID",
              "type": "uint16"
            }
          ],
          "internalType": "struct iEmissionsNFT.emissionsVerification[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "latestPedByTokenID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "fromDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toDateTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "co2eAmount",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "emissionsOrigin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "publicIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "protectedIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sapcapDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "emissionsVaultID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "adjustmentID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reportingGHGOrgID",
          "type": "string"
        },
        {
          "internalType": "enum iEmissionsNFT.carbonScopeLevel",
          "name": "scopeLevel",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "latestPevByTokenID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "tokenVerificationID",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "verifierDID",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "verifierSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "verifiedOnDateTime1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verifiedOnDateTime2",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "verificationCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentAdjustmentID",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "latestVerifiedPedByTokenID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "fromDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toDateTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "co2eAmount",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "emissionsOrigin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "publicIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "protectedIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sapcapDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "emissionsVaultID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "adjustmentID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reportingGHGOrgID",
          "type": "string"
        },
        {
          "internalType": "enum iEmissionsNFT.carbonScopeLevel",
          "name": "scopeLevel",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mintEmissionsNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pevsByTokenID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "tokenVerificationID",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "verifierDID",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "verifierSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "verifiedOnDateTime1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verifiedOnDateTime2",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "verificationCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentAdjustmentID",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicEmissionsDisclosure",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "fromDateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toDateTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "co2eAmount",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "emissionsOrigin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "publicIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "protectedIPFSCID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sapcapDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "emissionsVaultID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "adjustmentID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reportingGHGOrgID",
          "type": "string"
        },
        {
          "internalType": "enum iEmissionsNFT.carbonScopeLevel",
          "name": "scopeLevel",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicEmissionsVerifications",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenID",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "tokenVerificationID",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "verifierDID",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "verifierSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "verifiedOnDateTime1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "verifiedOnDateTime2",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "verificationCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "currentAdjustmentID",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requestedVerifierDID",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ghgOrgID",
          "type": "string"
        }
      ],
      "name": "requestVerifierRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "scope3vreqs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "internalID",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "scope3VReqID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "scope3Contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "scope1Contract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "scope3GHGOrgID",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "scope3TokenID",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "scope1GHGOrgID",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "scope1TokenID",
          "type": "uint32"
        },
        {
          "internalType": "enum iEmissionsNFT.scope3vreqStatusEnum",
          "name": "scope3vreqStatus",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf028e206992150bd11908657ac646c35623a3a40ac998db1a9534f8f03fcaf0a",
  "receipt": {
    "to": null,
    "from": "0xF7f2aA988fBc748b3590D580daA8d3292905cd21",
    "contractAddress": "0x0F7666508Ca42b92aB81B525A818F11492d057f1",
    "transactionIndex": 0,
    "gasUsed": "4593726",
    "logsBloom": "0x
    "blockHash": "0x011d2e35785b0676066a42d3b362e7673b072007726f3129f84e58bd553eea9e",
    "transactionHash": "0xf028e206992150bd11908657ac646c35623a3a40ac998db1a9534f8f03fcaf0a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18689589,
        "transactionHash": "0xf028e206992150bd11908657ac646c35623a3a40ac998db1a9534f8f03fcaf0a",
        "address": "0x0F7666508Ca42b92aB81B525A818F11492d057f1",
        "topics": [
          "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
        ],
        "data": "0x000000000000000000000000f7f2aa988fbc748b3590d580daa8d3292905cd21",
        "logIndex": 0,
        "blockHash": "0x011d2e35785b0676066a42d3b362e7673b072007726f3129f84e58bd553eea9e"
      }
    ],
    "blockNumber": 18689589,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1234567890abcdef1234567890abcdef12345678"
  ],
  "numDeployments": 1,
  "solcInputHash": "8c5b5229d16cabcf9d90a0a237ecf715",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anchorContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dataStewardAddress\",\"type\":\"address\"}],\"name\":\"dataStewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartContractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"}],\"name\":\"emissionsTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"smartContractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenVerificationID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifierDID\",\"type\":\"address\"}],\"name\":\"emissionsTokenVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifierDID\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ghgOrgID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"verifyingOrgID\",\"type\":\"string\"}],\"name\":\"emissionsVerifierAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ghgOrgId\",\"type\":\"string\"}],\"name\":\"ghgOrgCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scope1ContractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scope3ContractAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"scope1ghgOrgID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"scope3ghgOrgID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"scope1TokenID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"scope3TokenID\",\"type\":\"uint32\"}],\"name\":\"reenlistVerifiersForScope3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scope1contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scope3contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"scope1GHGOrgID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"scope3GHGOrgID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"scope1TokenID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"scope3TokenID\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scope1TokenVerificationID\",\"type\":\"uint256\"}],\"name\":\"scope3referenced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_targetToken\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"_emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ghgOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"_scopeLevel\",\"type\":\"uint8\"}],\"name\":\"addEmissionsData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_targetToken\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenVerificationID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_verifierDID\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_verifierSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_verifiedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_currentAdjustmentID\",\"type\":\"uint16\"}],\"name\":\"addEmissionsVerification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPedsByTokenID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reportingGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"scopeLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierDID\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ghgOrgID\",\"type\":\"string\"}],\"name\":\"approveVerifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDataSteward\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ghgOrgID\",\"type\":\"string\"}],\"name\":\"autoApproveDataSteward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataStewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dataStewardAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acknowledDataSteward\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ghgOrgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dataStewardsByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dataStewardAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acknowledDataSteward\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ghgOrgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ghgOrganizationID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ghgOrganizationName\",\"type\":\"string\"}],\"name\":\"defineGHGOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"determineMintReadiness\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissionsVerifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"emissionsVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acknowledgedVerifer\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"requestedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subjectGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"verificationOrgID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"acknowledgedOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emissionsVerifiersByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"emissionsVerifierAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"acknowledgedVerifer\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"requestedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addedBy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"subjectGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"verificationOrgID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"acknowledgedOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEmissionsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reportingGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"scopeLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct iEmissionsNFT.emissionsData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenID\",\"type\":\"uint32\"}],\"name\":\"getEmissionsDataByTokenID\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reportingGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"scopeLevel\",\"type\":\"uint8\"}],\"internalType\":\"struct iEmissionsNFT.emissionsData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_tokenID\",\"type\":\"uint32\"}],\"name\":\"getTokenVerifications\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tokenVerificationID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"verifierDID\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"verifierSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime2\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"verificationCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentAdjustmentID\",\"type\":\"uint16\"}],\"internalType\":\"struct iEmissionsNFT.emissionsVerification[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"latestPedByTokenID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reportingGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"scopeLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"latestPevByTokenID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tokenVerificationID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"verifierDID\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"verifierSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime2\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"verificationCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentAdjustmentID\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"latestVerifiedPedByTokenID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reportingGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"scopeLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintEmissionsNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pevsByTokenID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tokenVerificationID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"verifierDID\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"verifierSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime2\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"verificationCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentAdjustmentID\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicEmissionsDisclosure\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"fromDateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDateTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"co2eAmount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"emissionsOrigin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"publicIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"protectedIPFSCID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sapcapDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"emissionsVaultID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"adjustmentID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reportingGHGOrgID\",\"type\":\"string\"},{\"internalType\":\"enum iEmissionsNFT.carbonScopeLevel\",\"name\":\"scopeLevel\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicEmissionsVerifications\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenID\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tokenVerificationID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"verifierDID\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"verifierSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verifiedOnDateTime2\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"verificationCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"currentAdjustmentID\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requestedVerifierDID\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ghgOrgID\",\"type\":\"string\"}],\"name\":\"requestVerifierRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scope3vreqs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"internalID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"scope3VReqID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"scope3Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"scope1Contract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"scope3GHGOrgID\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"scope3TokenID\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"scope1GHGOrgID\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"scope1TokenID\",\"type\":\"uint32\"},{\"internalType\":\"enum iEmissionsNFT.scope3vreqStatusEnum\",\"name\":\"scope3vreqStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/emissionsNFT.sol\":\"emissionsNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/emissionsNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./verifierContract.sol\\\";\\nimport \\\"./iEmissionsNFT.sol\\\";\\n\\ncontract emissionsNFT is ERC721, iEmissionsNFT {\\n address public owner;\\n address public anchorContract;\\n uint32 latestTokenID;\\n bool readyToMint;\\n VerifySignature verifier;\\n constructor(address _anchorContract) ERC721(\\\"EmissionsNFT\\\", \\\"CO2eNFT\\\") {\\n   owner = msg.sender;\\n   anchorContract = _anchorContract;\\n   dataSteward memory defaultDataSteward;\\n   defaultDataSteward.dataStewardAddress = msg.sender;\\n   defaultDataSteward.acknowledDataSteward = true;\\n   dataStewards.push(defaultDataSteward);\\n   dataStewardsByAddress[msg.sender] = defaultDataSteward;\\n   latestTokenID = 1;\\n   readyToMint = false;\\n }\\n\\n mapping(string => ghgOrganization) private registeredGHGOrg;\\n mapping(string => bool) private isGHGOrg;\\n\\n emissionsData[] public publicEmissionsDisclosure;\\n mapping(uint32 => emissionsData[]) public allPedsByTokenID;\\n mapping(uint32 => emissionsData) public latestPedByTokenID;\\n mapping(uint32 => emissionsData) public latestVerifiedPedByTokenID;\\n \\n emissionsVerification[] public publicEmissionsVerifications;\\n mapping(uint32 => emissionsVerification[]) public pevsByTokenID;\\n mapping(uint32 => emissionsVerification) public latestPevByTokenID;\\n \\n emissionsVerifier[] public emissionsVerifiers;\\n mapping(address => emissionsVerifier) public emissionsVerifiersByAddress;\\n\\n dataSteward[] public dataStewards;\\n mapping(address => dataSteward) public dataStewardsByAddress;\\n\\n //scope3 requests\\n scope3VerificationRequest[] public scope3vreqs;\\n\\n function determineMintReadiness() public view returns (bool) {\\n    return readyToMint;\\n }\\n\\n function mintEmissionsNFT(address _to) public onlyDataSteward {\\n  require(determineMintReadiness() == true, \\\"Contract is not ready to mint. Please complete configuration\\\");\\n  require(msg.sender == _to, \\\"Data stewards must own the initial mint\\\");\\n  latestTokenID++;\\n }\\n\\n function mint(address _to) private {\\n  uint32 newTokenID = getNextTokenID();\\n  _mint(_to, newTokenID);\\n  emit emissionsTokenCreated(address(this), newTokenID);\\n  latestTokenID++;\\n }\\n\\n function defineGHGOrg(string calldata _ghgOrganizationID, string calldata _ghgOrganizationName) public onlyDataSteward {\\n    ghgOrganization memory definedGHGOrg;\\n    definedGHGOrg.ghgOrganizationID = _ghgOrganizationID;\\n    definedGHGOrg.ghgOrganizationName = _ghgOrganizationName;\\n    registeredGHGOrg[_ghgOrganizationID] = definedGHGOrg;\\n    readyToMint = true;\\n }\\n\\n// Carbon Emissions Data Maintenance / Data Stewardship\\n function addEmissionsData(uint32 _targetToken, uint256 _fromDateTime, uint256 _toDateTime, int256 _co2eAmount, address _emissionsOrigin, bytes32 _publicIPFSCID, bytes32 _protectedIPFSCID, bytes32 _sapcapDataHash, string calldata _emissionsVaultID, string calldata _ghgOrgID, carbonScopeLevel _scopeLevel) public returns (bool) {\\n    // token must exist\\n    require(_exists(_targetToken), \\\"Token does not exist!\\\" );\\n\\n    //validate the from and to timestamp\\n    require(_toDateTime > _fromDateTime, \\\"from-datetime must be less than to-datetime\\\");\\n\\n    //ensure a valid configured org id is added\\n    require(isGHGOrg[_ghgOrgID] == true, \\\"GHG Organization is unknown. Please register it\\\");\\n\\n    //ensure valid scope level is passed\\n    require(_scopeLevel <= carbonScopeLevel.Scope3, \\\"Emissions data must be classified as scopes 1-3 or as unknown(0)\\\");\\n    \\n    uint32 targetToken = _targetToken;\\n    emissionsData[] memory pedsByTokenID;\\n    pedsByTokenID = allPedsByTokenID[targetToken];\\n    //see if this emissions data was already maintained\\n    if(pedsByTokenID.length == 0) {\\n        emissionsData memory newEmissionsData;\\n        newEmissionsData.tokenID = targetToken;\\n        newEmissionsData.fromDateTime = _fromDateTime;\\n        newEmissionsData.toDateTime = _toDateTime;\\n        newEmissionsData.co2eAmount = _co2eAmount;\\n        newEmissionsData.emissionsOrigin = _emissionsOrigin;\\n        newEmissionsData.publicIPFSCID = _publicIPFSCID;\\n        newEmissionsData.protectedIPFSCID = _protectedIPFSCID;\\n        newEmissionsData.sapcapDataHash = _sapcapDataHash;\\n        newEmissionsData.emissionsVaultID = _emissionsVaultID;\\n        newEmissionsData.reportingGHGOrgID = _ghgOrgID;\\n        newEmissionsData.adjustmentID = 0;\\n        publicEmissionsDisclosure.push(newEmissionsData);\\n        latestPedByTokenID[targetToken] = newEmissionsData;\\n    } else {\\n        emissionsData storage existingEmissionsData = latestPedByTokenID[targetToken];\\n        require(existingEmissionsData.fromDateTime == _fromDateTime, \\\"From Date Time must remain the same\\\");\\n        require(existingEmissionsData.toDateTime == _toDateTime, \\\"To Date Time must remain the same\\\");\\n        int256 adjustedCO2Eamount = _co2eAmount;\\n        address adjustedEmissionsOrigin = _emissionsOrigin;\\n        bytes32 adjustedPublicIPFSCID = _publicIPFSCID;\\n        bytes32 adjustedProtectedIPFSCID = _protectedIPFSCID;\\n        bytes32 adjustedSAPCAPdatahash = _sapcapDataHash;\\n        string calldata adjustedEmissionsVaultID = _emissionsVaultID;\\n        string calldata adjustedGHGOrg = _ghgOrgID;\\n        carbonScopeLevel adjustedScopeLevel = _scopeLevel;\\n        adjustEmissionsData(existingEmissionsData.fromDateTime, existingEmissionsData.toDateTime, targetToken, adjustedCO2Eamount, adjustedEmissionsOrigin, adjustedPublicIPFSCID, adjustedProtectedIPFSCID, adjustedSAPCAPdatahash, adjustedEmissionsVaultID, adjustedGHGOrg, adjustedScopeLevel);\\n    }\\n    return true;\\n }\\n function adjustEmissionsData(uint256 _fromDateTime, uint256 _toDateTime, uint32 _targetToken, int256 _co2eAmount, address _emissionsOrigin, bytes32 _publicIPFSCID, bytes32 _protectedIPFSCID, bytes32 _sapcapDataHash, string calldata _emissionsVaultID, string calldata _ghgOrgID, carbonScopeLevel _scopeLevel) private returns (bool) {\\n        emissionsData memory adjustedEmissionsData;\\n        adjustedEmissionsData.tokenID = _targetToken;\\n        adjustedEmissionsData.fromDateTime = _fromDateTime;\\n        adjustedEmissionsData.toDateTime = _toDateTime;\\n        adjustedEmissionsData.co2eAmount = _co2eAmount;\\n        adjustedEmissionsData.emissionsOrigin = _emissionsOrigin;\\n        adjustedEmissionsData.publicIPFSCID = _publicIPFSCID;\\n        adjustedEmissionsData.protectedIPFSCID = _protectedIPFSCID;\\n        adjustedEmissionsData.sapcapDataHash = _sapcapDataHash;\\n        adjustedEmissionsData.emissionsVaultID = _emissionsVaultID;\\n        adjustedEmissionsData.reportingGHGOrgID = _ghgOrgID;\\n        adjustedEmissionsData.scopeLevel = _scopeLevel;\\n        adjustedEmissionsData.adjustmentID = allPedsByTokenID[_targetToken].length;\\n        publicEmissionsDisclosure.push(adjustedEmissionsData);\\n        return true;\\n }\\n\\n //Carbon Emissions Data Verification\\n function addEmissionsVerification(uint32 _targetToken, uint256 _tokenVerificationID, address _verifierDID, string memory _message, bytes calldata _verifierSignature, uint256 _verifiedOn, uint16 _currentAdjustmentID) public onlyEmissionsVerifier {\\n   bool isValidVerification = false;\\n   isValidVerification = verifier.verify(_verifierDID, _message, _verifierSignature);\\n   require(isValidVerification == true, \\\"Emission Data Verification is invalid\\\");\\n\\n   emissionsVerification memory newPEV;\\n   newPEV.tokenID = _targetToken;\\n   newPEV.verifierDID = _verifierDID;\\n   newPEV.verifierSignature = _verifierSignature;\\n   newPEV.verifiedOnDateTime1 = _verifiedOn;\\n   newPEV.verifiedOnDateTime2 = block.timestamp; \\n   newPEV.currentAdjustmentID = _currentAdjustmentID;\\n   publicEmissionsVerifications.push(newPEV);\\n   pevsByTokenID[_targetToken].push(newPEV);\\n   latestPevByTokenID[_targetToken] = newPEV;\\n   emit emissionsTokenVerified(address(this), _targetToken, _currentAdjustmentID, _tokenVerificationID, _verifierDID);\\n }\\n\\n function getTokenVerifications(uint32 _tokenID) external view returns(emissionsVerification[] memory){\\n  emissionsVerification[] memory emissionsVerificationByToken;\\n  emissionsVerificationByToken = pevsByTokenID[_tokenID];\\n  return emissionsVerificationByToken;\\n }\\n\\n function requestVerifierRole(address _requestedVerifierDID, string calldata _ghgOrgID) public{\\n    emissionsVerifier memory requestedVerifier;\\n    requestedVerifier.emissionsVerifierAddress = _requestedVerifierDID;\\n    requestedVerifier.requestedBy = msg.sender;\\n    requestedVerifier.acknowledgedVerifer = false;\\n    requestedVerifier.subjectGHGOrgID = _ghgOrgID;\\n    emissionsVerifiersByAddress[_requestedVerifierDID] = requestedVerifier;\\n }\\n\\n function approveVerifierRole(address _verifierDID, string calldata _ghgOrgID) public onlyAuthority {\\n   require(_verifierDID != msg.sender, \\\"Sorry. Cannot self-approve verifier role.\\\");\\n   emissionsVerifier storage approvedVerifier = emissionsVerifiersByAddress[_verifierDID];\\n   approvedVerifier.acknowledgedVerifer = true;\\n   approvedVerifier.acknowledgedOn = block.timestamp;\\n   approvedVerifier.addedBy = msg.sender;\\n   approvedVerifier.subjectGHGOrgID = _ghgOrgID;\\n   emissionsVerifiersByAddress[_verifierDID] = approvedVerifier;\\n }\\n\\n function autoApproveDataSteward(address _newDataSteward, string calldata _ghgOrgID) external returns (bool) {\\n    require(msg.sender == owner, \\\"Only the contract owner may do this\\\");\\n    dataSteward memory autoApproved;\\n    autoApproved.dataStewardAddress = _newDataSteward;\\n    autoApproved.addedBy = msg.sender;\\n    autoApproved.acknowledDataSteward = true;\\n    autoApproved.ghgOrgID = _ghgOrgID;\\n    dataStewards.push(autoApproved);\\n    dataStewardsByAddress[_newDataSteward] = autoApproved;\\n    return true;\\n }\\n\\n\\n function getNextTokenID() public view returns (uint32){\\n   return latestTokenID;\\n }\\n\\n function getAllEmissionsData() external view returns (emissionsData[] memory){}\\n\\n function getEmissionsDataByTokenID(uint32 _tokenID) external view returns(emissionsData[] memory){\\n   return allPedsByTokenID[_tokenID];\\n }\\n\\n /*function requestScope3EmissionsDataVerification(address _destinationContract, string memory _myghgOrgID, string memory _yourghgOrgID, uint32 _myTokenID, uint32 _yourTokenID) external returns(uint256){\\n    // get the remote contract instance\\n    iEmissionsNFT remoteContract = iEmissionsNFT(_destinationContract);\\n    uint256 scope3DVTicket = 0;\\n    try remoteContract.logScope3VerificationRequests(address(this), _myghgOrgID, _yourghgOrgID, _myTokenID, _yourTokenID) {\\n      return scope3DVTicket;\\n    } catch {\\n      return scope3DVTicket;\\n    }\\n }*/\\n\\n /*function logScope3VerificationRequests(address _originContract, string calldata _scope3GHGOrgID, string calldata _scope1GHGOrgID, uint32 _scope3TokenID, uint32 _scope1TokenID) external returns (scope3VerificationRequest memory){\\n    scope3VerificationRequest memory inboundRequest;\\n    inboundRequest.scope1Contract = address(this);\\n    inboundRequest.scope3Contract = _originContract;\\n    inboundRequest.scope3GHGOrgID = _scope3GHGOrgID;\\n    inboundRequest.scope1GHGOrgID = _scope1GHGOrgID;\\n    inboundRequest.scope1TokenID = _scope1TokenID;\\n    inboundRequest.scope3TokenID = _scope3TokenID;\\n    inboundRequest.scope3vreqStatus = scope3vreqStatusEnum.CREATED;\\n    scope3vreqs.push(inboundRequest);\\n    return inboundRequest;\\n }*/\\n\\n /*function getScope3VerificationRequest(address _originContract, string calldata _scope3GHGOrgID, string calldata _scope1GHGOrgID, uint32 _scope3TokenID, uint32 _scope1TokenID) external returns (scope3VerificationRequest memory){\\n   scope3VerificationRequest memory myScope3Request;\\n   iEmissionsNFT remoteContract = iEmissionsNFT(_originContract);\\n   //myScope3Request = iEmissionsNFT.getScope3VerificationRequest(_originContract, _scope3GHGOrgID, _scope1GHGOrgID, _scope3TokenID, _scope1TokenID);\\n   return myScope3Request;\\n }*/\\n\\n /*function sendScope3Verification(address _originContract, string calldata _scope3GHGOrgID, string calldata _scope1GHGOrgID, uint32 _scope3TokenID, uint32 _scope1TokenID, uint256 _tokenVerificationID) external returns (scope3VerificationRequest memory) {\\n    iEmissionsNFT remoteContract = iEmissionsNFT(_originContract);\\n    //remoteContract.createScope3Verification(_scope3TokenID, _tokenVerificationID, _verifierDID, _message, _verifierSignature, _verifiedOn, _currentAdjustmentID);\\n    scope3VerificationRequest memory returnedRequest;\\n    address myContractAddress = address(this);\\n    //returnedRequest = iEmissionsNFT.getScope3VerificationRequest(myContractAddress, _scope3GHGOrgID, _scope1GHGOrgID, _scope3TokenID, _scope1TokenID);\\n    //remoteContract.createScope3Verification(_targetToken, _tokenVerificationID, _verifierDID, _message, _verifierSignature, _verifiedOn, _currentAdjustmentID);\\n    return returnedRequest;\\n }*/\\n\\n /*function createScope3Verification(uint32 _targetToken, uint256 _tokenVerificationID, address _verifierDID, string memory _message, bytes calldata _verifierSignature, uint256 _verifiedOn, uint16 _currentAdjustmentID) external returns (emissionsVerification memory) {\\n    addEmissionsVerification(_targetToken, _tokenVerificationID, _verifierDID, _message, _verifierSignature, _verifiedOn, _currentAdjustmentID); \\n }*/\\n\\n /*function pushScope3Verifiers(address _scope3contract, string calldata _scope1GHGOrgID, string calldata _scope3GHGOrgID) external returns (emissionsVerifier memory) {\\n    //get the verifiers for the scope 1 token\\n }*/\\n\\n /*function shareAddress() external view returns(address) {\\n    return address(this);\\n }*/\\n\\n //Role-based modifiers\\n modifier onlyEmissionsVerifier() {\\n   emissionsVerifier memory emissionsVerifierLookup = emissionsVerifiersByAddress[msg.sender];\\n   require(emissionsVerifierLookup.acknowledgedVerifer == true, \\\"Emissions Verifier Role needs approval\\\");\\n   _;\\n }\\n\\n modifier onlyDataSteward() {\\n   dataSteward memory dataStewardLookup = dataStewardsByAddress[msg.sender];\\n   require(dataStewardLookup.acknowledDataSteward == true, \\\"Data steward role needs approval\\\");\\n   _;\\n }\\n \\n //Smart contract owner\\n modifier onlyOwner() {\\n   require(msg.sender == owner, \\\"Only the contract owner may do this\\\");\\n   _;\\n }\\n\\n //either data stewards or emissions verifiers\\n modifier onlyAuthority() {\\n   bool isAuthority = false;\\n   emissionsVerifier memory emissionsVerifierLookup = emissionsVerifiersByAddress[msg.sender];\\n   dataSteward memory dataStewardLookup = dataStewardsByAddress[msg.sender];\\n   if(emissionsVerifierLookup.acknowledgedVerifer == true || dataStewardLookup.acknowledDataSteward == true){\\n      isAuthority = true;\\n   }\\n   require(isAuthority == true, \\\"Data steward or emissions verifier role needs approval\\\");\\n   _;\\n }\\n}\\n\",\"keccak256\":\"0x51b6752b61bb2d0bf7bdeb7eacd1b538ccc7800fe7b05721fa52dc540ac002df\",\"license\":\"MIT\"},\"contracts/iEmissionsNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface iEmissionsNFT {\\r\\n    enum carbonScopeLevel {\\r\\n        Unknown,\\r\\n        Scope1,\\r\\n        Scope2,\\r\\n        Scope3\\r\\n    }\\r\\n\\r\\n     //GHG Organization\\r\\n    struct ghgOrganization {\\r\\n        string ghgOrganizationID;\\r\\n        string ghgOrganizationName;\\r\\n        bytes privateHash;\\r\\n    }\\r\\n\\r\\n    //Tokenized Carbon Emissions Data\\r\\n    struct emissionsData {\\r\\n        uint32 tokenID;\\r\\n        uint256 fromDateTime;\\r\\n        uint256 toDateTime;\\r\\n        int256 co2eAmount;\\r\\n        address emissionsOrigin;\\r\\n        bytes32 publicIPFSCID;\\r\\n        bytes32 protectedIPFSCID;\\r\\n        bytes32 sapcapDataHash;\\r\\n        string emissionsVaultID;\\r\\n        uint256 adjustmentID;\\r\\n        string reportingGHGOrgID;\\r\\n        carbonScopeLevel scopeLevel;\\r\\n    }\\r\\n\\r\\n     //Carbon Emissions Verification\\r\\n    struct emissionsVerification {\\r\\n        uint32 tokenID;\\r\\n        uint16 tokenVerificationID;\\r\\n        address verifierDID;\\r\\n        bytes verifierSignature;\\r\\n        uint256 verifiedOnDateTime1;\\r\\n        uint256 verifiedOnDateTime2;\\r\\n        uint16 verificationCount;\\r\\n        uint16 currentAdjustmentID;\\r\\n    }\\r\\n\\r\\n     //Carbon Emissions Verifiers\\r\\n    struct emissionsVerifier {\\r\\n        address emissionsVerifierAddress;\\r\\n        bool acknowledgedVerifer;\\r\\n        address requestedBy;\\r\\n        address addedBy;\\r\\n        string subjectGHGOrgID;\\r\\n        string verificationOrgID;\\r\\n        uint256 acknowledgedOn;\\r\\n    }\\r\\n\\r\\n     //Carbon Emissions Data Stewards\\r\\n    struct dataSteward {\\r\\n        address dataStewardAddress;\\r\\n        bool acknowledDataSteward;\\r\\n        address addedBy;\\r\\n        string ghgOrgID;\\r\\n    }\\r\\n\\r\\n    //Scope 3 verification request\\r\\n    enum scope3vreqStatusEnum {\\r\\n        CREATED,\\r\\n        REJECTED,\\r\\n        ENLISTED,\\r\\n        VERIFIED\\r\\n    }\\r\\n    struct scope3VerificationRequest {\\r\\n        uint32 internalID;\\r\\n        uint256 scope3VReqID;\\r\\n        address scope3Contract;\\r\\n        address scope1Contract;\\r\\n        string scope3GHGOrgID;\\r\\n        uint32 scope3TokenID;\\r\\n        string scope1GHGOrgID;\\r\\n        uint32 scope1TokenID;\\r\\n        scope3vreqStatusEnum scope3vreqStatus;\\r\\n    }\\r\\n\\r\\n    //events\\r\\n    event ghgOrgCreated(string ghgOrgId);\\r\\n    event dataStewardAdded(address dataStewardAddress);\\r\\n    event emissionsVerifierAdded(address verifierDID, string ghgOrgID, string verifyingOrgID);\\r\\n    event emissionsTokenCreated(address smartContractAddr, uint32 tokenID);\\r\\n    event emissionsTokenVerified(address smartContractAddr, uint32 tokenID, uint256 adjustmentID, uint256 tokenVerificationID, address verifierDID);\\r\\n    event reenlistVerifiersForScope3(address scope1ContractAddr, address scope3ContractAddr, string scope1ghgOrgID, string scope3ghgOrgID, uint32 scope1TokenID, uint32 scope3TokenID);\\r\\n    event scope3referenced(address scope1contract, address scope3contract, string scope1GHGOrgID, string scope3GHGOrgID, uint32 scope1TokenID, uint32 scope3TokenID, uint256 scope1TokenVerificationID);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //functions\\r\\n\\r\\n    function autoApproveDataSteward(address _newDataSteward, string calldata _ghgOrgID) external returns (bool);\\r\\n\\r\\n    function getNextTokenID() external view returns (uint32);\\r\\n\\r\\n    function getAllEmissionsData() external view returns (emissionsData[] memory);\\r\\n\\r\\n    function getEmissionsDataByTokenID(uint32 _tokenID) external view returns(emissionsData[] memory);\\r\\n\\r\\n    function getTokenVerifications(uint32 _tokenID) external view returns(emissionsVerification[] memory);\\r\\n\\r\\n    //function requestScope3EmissionsDataVerification(address _destinationContract, string memory _myghgOrgID, string memory _yourghgOrgID, uint32 _myTokenID, uint32 _yourTokenID) external returns(uint256);\\r\\n\\r\\n    //function logScope3VerificationRequests(address _originContract, string calldata _scope3GHGOrgID, string calldata _scope1GHGOrgID, uint32 _scope3TokenID, uint32 _scope1TokenID) external returns (scope3VerificationRequest memory);\\r\\n\\r\\n    //function getScope3VerificationRequest(address _originContract, string calldata _scope3GHGOrgID, string calldata _scope1GHGOrgID, uint32 _scope3TokenID, uint32 _scope1TokenID) external returns (scope3VerificationRequest memory);\\r\\n\\r\\n    //function sendScope3Verification(address _originContract, string calldata _scope3GHGOrgID, string calldata _scope1GHGOrgID, uint32 _scope3TokenID, uint32 _scope1TokenID, uint256 _tokenVerificationID) external returns (scope3VerificationRequest memory);\\r\\n\\r\\n    //function createScope3Verification(uint32 _targetToken, uint256 _tokenVerificationID, address _verifierDID, string memory _message, bytes calldata _verifierSignature, uint256 _verifiedOn, uint16 _currentAdjustmentID) external returns (emissionsVerification memory);\\r\\n\\r\\n    //function pushScope3Verifiers(address _scope3contract, string calldata _scope1GHGOrgID, string calldata _scope3GHGOrgID) external returns (emissionsVerifier memory);\\r\\n    \\r\\n    //function shareAddress() external view returns(address);\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xb7bdfcbbb44f12d4f5831b30ca27c246f6781b0464ffa2f3007dbe7463379552\",\"license\":\"MIT\"},\"contracts/verifierContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VerifySignature {\\n    /*\\n     * @dev Verifies if the message was signed by a given address\\n     * @param _signer The address of the signer\\n     * @param _message The message that was signed\\n     * @param _signature The signature to verify (r, s, v format)\\n     * @return bool indicating whether the signature is valid\\n     */\\n    function verify(address _signer, string memory _message, bytes memory _signature)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        // The messageHash is obtained by hashing the message\\n        bytes32 messageHash = getMessageHash(_message);\\n\\n        // The ethSignedMessageHash is obtained by prefixing the messageHash\\n        // with the string `\\\\x19Ethereum Signed Message:\\\\n{message length}`\\n        // and then hashing it again.\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        // Recover the signer's address from the signature\\n        address recoveredSigner = recoverSigner(ethSignedMessageHash, _signature);\\n\\n        // Compare the recovered signer to the expected signer\\n        return recoveredSigner == _signer;\\n    }\\n\\n    /*\\n     * @dev Generates the hash of the input message\\n     * @param _message The message to hash\\n     * @return bytes32 hash of the message\\n     */\\n    function getMessageHash(string memory _message)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_message));\\n    }\\n\\n    /*\\n     * @dev Generates the Ethereum signed message hash\\n     * @param _messageHash Hash of the message\\n     * @return bytes32 Ethereum signed message hash\\n     */\\n    function getEthSignedMessageHash(bytes32 _messageHash)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        // This prefix is needed for a correct recovery of the address from the signature\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    /*\\n     * @dev Recovers the signer's address from the signature\\n     * @param _ethSignedMessageHash The Ethereum signed message hash\\n     * @param _signature The signature to recover the signer from\\n     * @return address of the signer\\n     */\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    /*\\n     * @dev Splits the signature into r, s and v components\\n     * @param _signature The signature to split\\n     * @return r, s, and v components of the signature\\n     */\\n    function splitSignature(bytes memory _signature)\\n        internal\\n        pure\\n        returns (bytes32 r, bytes32 s, uint8 v)\\n    {\\n        require(_signature.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(_signature, 32))\\n            // second 32 bytes\\n            s := mload(add(_signature, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n\\n        // Adjust the v value if it's in lower s form\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        require(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0809a881f8957084aa7921eafa282180c067c89d0fbc640205dd1bbd4b609150\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200042c57601f6200447c38819003828101601f199081168501946001600160401b0394939092858711848810176200041657808492604098895283396020938491810103126200042c57516001600160a01b038116908190036200042c576200006b62000431565b91600c83526b115b5a5cdcda5bdb9cd3919560a21b848401526200008e62000431565b94600786526610d3cc9953919560ca1b8587015283519587871162000416576000968754956001968781811c911680156200040b575b89821014620003f757908185849311620003a4575b50889085831160011462000343578a9262000337575b5050600019600383901b1c191690861b1787555b805192888411620003235785548681811c9116801562000318575b8882101462000304579081848695949311620002ad575b50879284116001146200024c5750879262000240575b5050600019600383901b1c191690831b1782555b60018060a01b03193381600654161760065560075416176007558451936080850190858210908211176200022c5785528285850152606080850152338452808285015260145490680100000000000000008210156200022c5781018060145581101562000218579160158592620001e886620001f3979660148652600384872091020162000451565b338352522062000451565b6007805464ffffffffff60a01b1916600160a01b17905551613e7d9081620005ff8239f35b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b84526041600452602484fd5b0151905038806200014b565b86895287892087959093929116895b898282106200029657505084116200027c575b505050811b0182556200015f565b015160001960f88460031b161c191690553880806200026e565b83850151865589979095019493840193016200025b565b90919293508689528789208480870160051c8201928a8810620002fa575b9187968a92969594930160051c01915b828110620002eb57505062000135565b8b8155879650899101620002db565b92508192620002cb565b634e487b7160e01b89526022600452602489fd5b90607f16906200011e565b634e487b7160e01b88526041600452602488fd5b015190503880620000ef565b9086899416918b80528a8c20928c5b8c8282106200038d575050841162000373575b505050811b01875562000103565b015160001960f88460031b161c1916905538808062000365565b8385015186558c9790950194938401930162000352565b909150898052888a208580850160051c8201928b8610620003ed575b918a91869594930160051c01915b828110620003de575050620000d9565b8c81558594508a9101620003ce565b92508192620003c0565b634e487b7160e01b8a52602260045260248afd5b90607f1690620000c4565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b038111838210176200041657604052565b815181546020808501516001600160a81b03199092166001600160a01b039384161791151560a01b60ff60a01b169190911783556040840151600184810180546001600160a01b0319169290941691909117909255606093909301518051600290930193919291906001600160401b038311620004165784548481811c91168015620005f3575b83821014620005dd57601f81116200058f575b5081601f84116001146200052857509282939183926000946200051c575b50501b916000199060031b1c1916179055565b01519250388062000509565b919083601f1981168760005284600020946000905b888383106200057457505050106200055a575b505050811b019055565b015160001960f88460031b161c1916905538808062000550565b8587015188559096019594850194879350908101906200053d565b8560005282600020601f850160051c810191848610620005d2575b601f0160051c019085905b828110620005c5575050620004eb565b60008155018590620005b5565b9091508190620005aa565b634e487b7160e01b600052602260045260246000fd5b90607f1690620004d856fe608080604052600436101561001357600080fd5b60003560e01c90816265223914612cd35750806301ffc9a714612c65578063052b6feb14612c3f57806306fdde0314612b9c578063081812fc14612b7e578063095ea7b314612a045780630e183d1e146128525780631b0275601461272f57806323b872dd1461270657806329be76af146126945780633bb3e7151461264c5780633f088df01461244157806342842e0e146124195780634a198119146123f25780634b357ba31461237b57806359420a3914611ff85780635c141bae14611ca45780635d505ff814611a485780636352211e14611a18578063647ed61f146118d357806370a082311461183c578063712e267b146118135780638da5cb5b146117ea57806395d89b411461170b5780639b7a294b146112d35780639ef6f45f14610d62578063a22cb46514610c90578063a7130c7d14610c3c578063ad83796914610a8b578063b8817c65146108a8578063b88d4fde14610847578063c87b56dd146107da578063db2ab36f1461073b578063e5a3fdfe14610613578063e985e9c5146105bd578063e9b2ff7c1461052c578063ea592a0c146104bd578063f99cd9ba146102885763ffbcb41b146101cb57600080fd5b346102835760203660031901126102835763ffffffff806101ea612e52565b16600052600d60205260406000209081541661027f600183015492600281015490600381015460018060a01b036004830154166005830154600684015460078501549160405193610249856102428160088b01612ed1565b0386612ff0565b60098701549560ff600b6040519961026f8b61026881600a8501612ed1565b038c612ff0565b015416986040519c8d9c8d6130f7565b0390f35b600080fd5b34610283576020806003193601126102835763ffffffff90816102a9612e52565b16600052600c9081815260406000209081546102c4816137ef565b936102d26040519586612ff0565b8185528285018094600052836000206000915b8483106103ea575050505050604051928184019082855251809152604084019160408260051b86010193926000965b8388106103215786860387f35b90919293948380600192603f198a8203018652885190858251168152828201518382015260408201516040820152606080830151908201526080858060a01b0381840151169082015260a0808301519082015260c0808301519082015260e082015160e08201526103c56103a661010080850151906101808091860152840190612dc6565b6101208085015190840152610140808501519084830390850152612dc6565b9161016080910151916103d783612e06565b0152970193019701969093929193610314565b838660019260409a989a516103fe81612fb9565b8c865416815284860154838201526002860154604082015260038601546060820152848060a01b036004870154166080820152600586015460a0820152600686015460c0820152600786015460e082015260405161046a816104638160088b01612ed1565b0382612ff0565b610100820152600986015461012082015260405161048f8161046381600a8b01612ed1565b61014082015260ff600b870154166104a681612e06565b6101608201528152019201920191909694966102e5565b3461028357602036600319011261028357600435601454811015610283576104e49061326d565b5080549061027f600260018060a01b039261051784600183015416916105106040518095819301612ed1565b0383612ff0565b60405194859460ff8260a01c16911685613238565b3461028357604036600319011261028357610545612e52565b60243563ffffffff809216600052600c6020526040600020805482101561028357600052600c60206000209102019081541661027f600183015492600281015490600381015460018060a01b036004830154166005830154600684015460078501549160405193610249856102428160088b01612ed1565b34610283576040366003190112610283576105d6612e26565b6105de612e3c565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b3461028357610621366131a3565b60065490926001600160a01b03929091831633036106ea5761066c906040519361064a85612f9e565b6060850193606085521694858552336040860152600160208601523691613201565b9052601454600160401b8110156106d45780600161068d920160145561326d565b9290926106be576106a1826106b394613d2e565b60005260156020526040600020613d2e565b602060405160018152f35b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152602360248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d617920646f207460448201526268697360e81b6064820152608490fd5b3461028357604036600319011261028357610754612e52565b60243563ffffffff809216600052601060205260406000209081548110156102835761077f91612e65565b5061027f8154916040519361079b856102428160018601612ed1565b600282015491600460038201549101549260405196879661ffff9081808860101c1697169560018060a01b038260301c16928260201c16911689613011565b3461028357602036600319011261028357600435600090815260026020526040902054610811906001600160a01b031615156132a8565b600060405161081f81612fd5565b5261027f60405161082f81612fd5565b60008152604051918291602083526020830190612dc6565b3461028357608036600319011261028357610860612e26565b610868612e3c565b606435916001600160401b03831161028357366023840112156102835761089c6108a6933690602481600401359101613201565b91604435916133b7565b005b346102835760203660031901126102835760043560165481101561028357601660005260031b63ffffffff9081817fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289015416907fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428a8101549260018060a01b0390610a71827fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428b85015416927fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428c8501541693604051906109ac82610510817fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428d8501612ed1565b610a5e847fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428e83015416927fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512429060405193610a2b85610242817fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428f8501612ed1565b01549760ff8960201c16976040519b8c9b8c5260208c015260408b015260608a01526101208060808b0152890190612dc6565b9160a088015286820360c0880152612dc6565b921660e0840152610a8181612e06565b6101008301520390f35b3461028357602036600319011261028357610aa4612e26565b3360005260156020526040600020610b156001604051610ac381612f9e565b60026060855492610b0a858060a01b0397888616835260ff602084019660a01c16151586528887820154166040840152610b036040518096819301612ed1565b0384612ff0565b015251151514613750565b60075491600160ff8460c01c16151503610bd157163303610b7c5763ffffffff808260a01c16908114610b665763ffffffff60a01b1990911660019190910160a01b63ffffffff60a01b1617600755005b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152602760248201527f44617461207374657761726473206d757374206f776e2074686520696e697469604482015266185b081b5a5b9d60ca1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603c60248201527f436f6e7472616374206973206e6f7420726561647920746f206d696e742e205060448201527f6c6561736520636f6d706c65746520636f6e66696775726174696f6e000000006064820152608490fd5b34610283576020366003190112610283576001600160a01b0380610c5e612e26565b16600052601560205260406000209061027f600283549361051784600183015416916105106040518095819301612ed1565b3461028357604036600319011261028357610ca9612e26565b60243590811515809203610283576001600160a01b031690338214610d1d57336000526005602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b346102835761016036600319011261028357610d7c612e52565b6084356001600160a01b0381168103610283576001600160401b03916101043583811161028357610db1903690600401613176565b936101243590811161028357610dcb903690600401613176565b91909460046101443510156102835763ffffffff84166000908152600260205260409020546001600160a01b03161561129657602435604435111561123d57600160ff60405185898237600a868201526020818781010301902054161515036111e057610e3a61014435612e06565b600361014435116111765763ffffffff8416600052600c60205260406000208054610e64816137ef565b91610e726040519384612ff0565b818352602083019060005260206000206000915b8383106110aa57505050505115600014610f38579463ffffffff9392610f01610f0e936106b398610eb5613806565b87891681526024356020820152604435604082015260643560608201526001600160a01b0390991660808a015260a43560a08a015260c43560c08a015260e43560e08a01523691613201565b6101008701523691613201565b6101408401526000610120840152610f2583613a9d565b16600052600d6020526040600020613862565b929193909463ffffffff8316600052600d60205260406000209460018601549560243587036110595760020154604435810361100a576110059763ffffffff96610fcf95610f0193610f88613806565b898b168152602081019b909b5260408b015260643560608b01526001600160a01b031660808a015260a43560a08a015260c43560c08a015260e43560e08a01523691613201565b610140840152610fe161014435612e06565b6101443561016084015216600052600c602052604060002054610120820152613a9d565b6106b3565b60405162461bcd60e51b815260206004820152602160248201527f546f20446174652054696d65206d7573742072656d61696e207468652073616d6044820152606560f81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f46726f6d20446174652054696d65206d7573742072656d61696e207468652073604482015262616d6560e81b6064820152608490fd5b600c60206001926040516110bd81612fb9565b63ffffffff865416815284860154838201526002860154604082015260038601546060820152848060a01b036004870154166080820152600586015460a0820152600686015460c0820152600786015460e0820152604051611126816104638160088b01612ed1565b610100820152600986015461012082015260405161114b8161046381600a8b01612ed1565b61014082015260ff600b8701541661116281612e06565b610160820152815201920192019190610e86565b608460405162461bcd60e51b815260206004820152604060248201527f456d697373696f6e732064617461206d75737420626520636c6173736966696560448201527f642061732073636f70657320312d33206f7220617320756e6b6e6f776e2830296064820152fd5b60405162461bcd60e51b815260206004820152602f60248201527f474847204f7267616e697a6174696f6e20697320756e6b6e6f776e2e20506c6560448201526e185cd9481c9959da5cdd195c881a5d608a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f66726f6d2d6461746574696d65206d757374206265206c657373207468616e2060448201526a746f2d6461746574696d6560a81b6064820152608490fd5b60405162461bcd60e51b8152602060048201526015602482015274546f6b656e20646f6573206e6f742065786973742160581b6044820152606490fd5b346102835760e0366003190112610283576112ec612e52565b604435906001600160a01b038216820361028357606435916001600160401b0380841161028357366023850112156102835761133360249436908681600401359101613201565b906084359081116102835761134c903690600401613176565b9360c4359261ffff8416809403610283573360005260136020526001604060002060405161137981612f83565b60c06005835493858060a01b038516845260ff602085019560a01c1615158552858060a01b0386820154166040850152858060a01b0360028201541660608501526040516113ce816104638160038601612ed1565b60808501526040516113e7816104638160048601612ed1565b60a08501520154910152511515036116b857600854604051632dd34f0f60e01b81526001600160a01b0387811660048301526060828b01529092602092849216908290849082908c906000908490611443906064860190612dc6565b84810360031901604486015283815292808d8386013783010152601f8d01601f1916010301915afa80156116ac57600090611670575b6001915015150361161e5782906040519261149384612f67565b6000602085015260608401606081526080850190600082526114e660a087019360008552600060c089015263ffffffff60e089019660008852169a8b895260018060a01b038b1660408a01523691613201565b905260a435905242905252600f54600160401b90818110156115f4576001810180600f558110156116095782600561154592600f600052027f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201613af1565b8460005260106020526040600020908154908110156115f45761156d91600182018155612e65565b6115df57916115b9826115a67f224a31073ab9b515cfbd76cfedf93c90b401fccc68ee4e6ed735554da71bf965989460a0989796613af1565b8560005260116020526040600020613af1565b6040519330855260208501526040840152356060830152600180841b03166080820152a1005b85634e487b7160e01b60005260006004526000fd5b86634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260326004526000fd5b60405162461bcd60e51b8152602060048201526025818801527f456d697373696f6e204461746120566572696669636174696f6e20697320696e6044820152641d985b1a5960da1b6064820152608490fd5b506020813d6020116116a4575b8161168a60209383612ff0565b810103126102835751801515810361028357600190611479565b3d915061167d565b6040513d6000823e3d90fd5b60405162461bcd60e51b8152602060048201526026818901527f456d697373696f6e7320566572696669657220526f6c65206e656564732061706044820152651c1c9bdd985b60d21b6064820152608490fd5b34610283576000366003190112610283576040516000600180549061172f82612e97565b808552918181169081156117c3575060011461176a575b61027f8461175681860382612ff0565b604051918291602083526020830190612dc6565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106117ab57505050810160200161175682611746565b80546020858701810191909152909301928101611793565b60ff191660208087019190915292151560051b850190920192506117569150839050611746565b34610283576000366003190112610283576006546040516001600160a01b039091168152602090f35b34610283576000366003190112610283576007546040516001600160a01b039091168152602090f35b34610283576020366003190112610283576001600160a01b0361185d612e26565b16801561187c5760005260036020526020604060002054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b346102835760203660031901126102835760043560125481101561028357600690601260005202807fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401549061027f60018060a01b0391827fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34458201541690837fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344682015416604051906119ab82610510817fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34478701612ed1565b7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344960405193611a0085610242817fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34488501612ed1565b01549360405197889760ff8260a01c1691168861309f565b34610283576020366003190112610283576020611a366004356132f4565b6040516001600160a01b039091168152f35b3461028357611a56366131a3565b9060405191611a6483612f83565b602080840190604085019160608601906000825260808701976060895260a088019560608752611ab260c08a019860008a5260018060a01b0380941692838c52338952600086523691613201565b8a526000908152601385526040902097518854925160ff60a01b90151560a01b166001600160a81b031990931690821660ff60a01b1916179190911787556001600160a01b03199060019481868a019151168382541617905560028801925116908254161790556003850195519586516001600160401b03978882116106d4578190611b4882611b428654612e97565b8661379b565b8490601f8311600114611c4157600092611c36575b5050600019600383901b1c191690841b1790555b60048501925180519687116106d457611b8e87611b428654612e97565b81601f8811600114611bcf5750958092819260059798600094611bc4575b50501b916000199060031b1c19161790555b51910155005b015192508880611bac565b909691601f198316978560005282600020926000905b8a8210611c1f575050836005989910611c06575b505050811b019055611bbe565b015160001960f88460031b161c19169055868080611bf9565b808785968294968601518155019501930190611be5565b015190508980611b5d565b90869350601f1983169185600052866000209260005b88828210611c8e5750508411611c75575b505050811b019055611b71565b015160001960f88460031b161c19169055898080611c68565b8385015186558a97909501949384019301611c57565b34610283576040366003190112610283576001600160401b0360043581811161028357611cd5903690600401613176565b909160243581811161028357611cef903690600401613176565b933360005260209160158352604060002094611d53604051611d1081612f9e565b87546002606060018060a01b0393848416815260ff8a82019460a01c1615158452610b0a60019c8d9687820154166040840152610b036040518096819301612ed1565b604051926060840190848210878311176106d457859160405260608552611d988286019460608652604087019a60608c52611d8f368786613201565b88523691613201565b84528260405193849283378101600981520301902091518051908582116106d4578190611dcf82611dc98754612e97565b8761379b565b8590601f8311600114611f9557600092611f8a575b5050600019600383901b1c191690861b1782555b518051828601918582116106d457611e1a82611e148554612e97565b8561379b565b8490601f8311600114611f225760029493929160009183611f17575b5050600019600383901b1c191690871b1790555b01935180519283116106d457611e6483611dc98754612e97565b81601f8411600114611eb15750928293918392600094611ea6575b50501b916000199060031b1c19161790555b6007805460ff60c01b1916600160c01b179055005b015192508580611e7f565b919083601f1981168760005284600020946000905b88838310611efd5750505010611ee4575b505050811b019055611e91565b015160001960f88460031b161c19169055838080611ed7565b858701518855909601959485019487935090810190611ec6565b015190508980611e36565b9392918791601f1982169084600052876000209160005b89828210611f74575050968360029810611f5b575b505050811b019055611e4a565b015160001960f88460031b161c19169055898080611f4e565b838a015185558c96909401939283019201611f39565b015190508880611de4565b90889350601f1983169186600052876000209260005b89828210611fe25750508411611fc9575b505050811b018255611df8565b015160001960f88460031b161c19169055888080611fbc565b8385015186558c97909501949384019301611fab565b3461028357612006366131a3565b9091600091336000526020916013835260406000209060c06040519561202b87612f83565b8354600560018060a01b039582878094168b5260ff8a8c019160a01c161515815260019a8b96879484878780970154166040850152876002820154166060850152604051612080816104638160038601612ed1565b6080850152604051612099816104638160048601612ed1565b60a085015201549101523360005260158a52600260608b6120f4604060002060ff604051936120c785612f9e565b82549a8b16855284019960a01c16151589528c87820154166040840152610b036040518096819301612ed1565b01525115151491821561236e575b5050612367575b151503612303578116933385146122ac578460005260138452604060002090600160a01b60ff60a01b19835416178255600582019442865560028301966001600160601b0360a01b9533878a541617895560038501996001600160401b0382116106d4576121818261217b8d54612e97565b8d61379b565b600090601f83116001146122435760139493929160009183612238575b5050600019600383901b1c191690851b178a555b600052526040600020968288036121c557005b82548854861690851617808955835460ff60a01b1990911660a091821c60ff16151590911b60ff60a01b16178855600596612232956004956122289481818d0191880154168382541617905560028b019254169082541617905560038801613c56565b0160048501613c56565b54910155005b013590508c8061219e565b918591949392601f198216908d600052856000209160005b818110612295575096836013981061227b575b505050811b018a556121b2565b0135600019600384901b60f8161c191690558c808061226e565b82890135845597870197899590930192870161225b565b60405162461bcd60e51b815260048101859052602960248201527f536f7272792e2043616e6e6f742073656c662d617070726f766520766572696660448201526834b2b9103937b6329760b91b6064820152608490fd5b60405162461bcd60e51b815260048101859052603660248201527f446174612073746577617264206f7220656d697373696f6e7320766572696669604482015275195c881c9bdb19481b9959591cc8185c1c1c9bdd985b60521b6064820152608490fd5b5080612109565b511515149050828a612102565b346102835760203660031901126102835763ffffffff8061239a612e52565b16600052600e60205260406000209081541661027f600183015492600281015490600381015460018060a01b036004830154166005830154600684015460078501549160405193610249856102428160088b01612ed1565b3461028357600036600319011261028357602063ffffffff60075460a01c16604051908152f35b34610283576108a661242a3661306a565b906040519261243884612fd5565b600084526133b7565b3461028357602036600319011261028357600435600b5481101561028357600c90600b6000520263ffffffff817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901541661027f7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba830154927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb810154907f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbc81015460018060a01b037f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbd830154167f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbe8301547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbf8401547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc085015491604051936125d085610242817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc18b01612ed1565b7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc28701549560ff7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc46040519961026f8b610268817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc38501612ed1565b346102835760203660031901126102835763ffffffff8061266b612e52565b166000526011602052604060002061027f8154916040519361079b856102428160018601612ed1565b34610283576020366003190112610283576001600160a01b03806126b6612e26565b16600052601360205260406000209061027f825492826001820154169083600282015416604051906126ef826105108160038701612ed1565b600560405193611a00856102428160048501612ed1565b34610283576108a66127173661306a565b9161272a6127258433613452565b613355565b61351a565b3461028357602036600319011261028357600435600f5481101561028357600590600f60005202807f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201549061027f604051916127b283610b03817f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8038501612ed1565b7f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac804810154937f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8067f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8058301549201549160405195869561ffff80808760101c1696169463ffffffff60018060a01b038260301c16928260201c16911689613011565b34610283576020806003193601126102835763ffffffff9081612873612e52565b16600052601090818152604060002090815461288e816137ef565b9361289c6040519586612ff0565b81855260009384528284208386019491855b848410612979575050505050604051928184019082855251809152604084019160408260051b86010193926000965b8388106128ea5786860387f35b90919293948380600192603f198a820301865288519085825116815260e061ffff80858501511685840152868060a01b03604085015116604084015281612941606080870151906101008091880152860190612dc6565b946080808201519086015260a0808201519086015260c0838183015116908601520151169101529701930197019690939291936128dd565b60058660019260409a989a5161298e81612f67565b86548d8116825261ffff908181861c1685840152868060a01b039060301c1660408301526040516129c581610463818a8d01612ed1565b606083015260028801546080830152600388015460a0830152600488015481811660c0840152871c1660e08201528152019301930192919694966128ae565b3461028357604036600319011261028357612a1d612e26565b602435906001600160a01b038080612a34856132f4565b16921691808314612b2f57803314908115612b0a575b5015612a9f57600083815260046020526040902080546001600160a01b03191683179055612a77836132f4565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4005b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b9050600052600560205260406000203360005260205260ff6040600020541684612a4a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b34610283576020366003190112610283576020611a36600435613317565b346102835760003660031901126102835760405160008054612bbd81612e97565b808452906001908181169081156117c35750600114612be65761027f8461175681860382612ff0565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410612c2757505050810160200161175682611746565b80546020858701810191909152909301928101612c0f565b3461028357600036600319011261028357602060ff60075460c01c166040519015158152f35b346102835760203660031901126102835760043563ffffffff60e01b8116809103610283576020906380ac58cd60e01b8114908115612cc2575b8115612cb1575b506040519015158152f35b6301ffc9a760e01b14905082612ca6565b635b5e139f60e01b81149150612c9f565b34610283576000366003190112610283576020908181019180825260608051809452604083019360408160051b8501019260809586936000975b848910612d1a5787870388f35b9091929394958480600192603f198b820301875289519063ffffffff82511681528282015183820152604082015160408201528682015187820152848060a01b0386830151168682015260a0808301519082015260c0808301519082015260e082015160e0820152612da06103a661010080850151906101808091860152840190612dc6565b916101608091015191612db283612e06565b015298019401980197919094939294612d0d565b919082519283825260005b848110612df2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612dd1565b60041115612e1057565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b038216820361028357565b602435906001600160a01b038216820361028357565b6004359063ffffffff8216820361028357565b8054821015612e81576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015612ec7575b6020831014612eb157565b634e487b7160e01b600052602260045260246000fd5b91607f1691612ea6565b9060009291805491612ee283612e97565b918282526001938481169081600014612f445750600114612f04575b50505050565b90919394506000526020928360002092846000945b838610612f30575050505001019038808080612efe565b805485870183015294019385908201612f19565b9294505050602093945060ff191683830152151560051b01019038808080612efe565b61010081019081106001600160401b038211176106d457604052565b60e081019081106001600160401b038211176106d457604052565b608081019081106001600160401b038211176106d457604052565b61018081019081106001600160401b038211176106d457604052565b602081019081106001600160401b038211176106d457604052565b90601f801991011681019081106001600160401b038211176106d457604052565b969192949897936130539063ffffffff60e0989316895261ffff968780961660208b015260018060a01b031660408a01526101008060608b0152890190612dc6565b98608088015260a08701521660c085015216910152565b6060906003190112610283576001600160a01b0390600435828116810361028357916024359081168103610283579060443590565b6001600160a01b039182168152911515602083015291821660408201529116606082015260e0608082018190529094939260c0926130f2926130e49190880190612dc6565b9086820360a0880152612dc6565b930152565b9c9b9a96929360608e6101609c9a96613153999563ffffffff6131689e9a9616835260208301526040820152015260018060a01b031660808d015260a08c015260c08b015260e08a0152610180806101008b0152890190612dc6565b91610120880152868203610140880152612dc6565b9361317283612e06565b0152565b9181601f84011215610283578235916001600160401b038311610283576020838186019501011161028357565b906040600319830112610283576004356001600160a01b03811681036102835791602435906001600160401b038211610283576131e291600401613176565b9091565b6001600160401b0381116106d457601f01601f191660200190565b92919261320d826131e6565b9161321b6040519384612ff0565b829481845281830111610283578281602093846000960137010152565b6001600160a01b0391821681529115156020830152909116604082015260806060820181905261326a92910190612dc6565b90565b601454811015612e81576003906014600052027fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0190600090565b156132af57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b031661326a8115156132a8565b60008181526002602052604090205461333a906001600160a01b031615156132a8565b6000908152600460205260409020546001600160a01b031690565b1561335c57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b906133db9392916133cb6127258433613452565b6133d683838361351a565b61362b565b156133e257565b60405162461bcd60e51b8152806133fb600482016133ff565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b906001600160a01b038080613466846132f4565b16931691838314938415613499575b508315613483575b50505090565b61348f91929350613317565b161438808061347d565b909350600052600560205260406000208260005260205260ff604060002054169238613475565b156134c757565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b9061354291613528846132f4565b6001600160a01b03939184169284929091831684146134c0565b169182156135da578161355f91613558866132f4565b16146134c0565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206001600160601b0360a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9293600093909291803b15613745579484916136859660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190612dc6565b0393165af1849181613701575b506136f0575050503d6000146136e8573d6136ac816131e6565b906136ba6040519283612ff0565b81528091833d92013e5b805191826136e55760405162461bcd60e51b8152806133fb600482016133ff565b01fd5b5060606136c4565b6001600160e01b0319161492509050565b9091508581813d831161373e575b6137198183612ff0565b8101031261373a57516001600160e01b03198116810361373a579038613692565b8480fd5b503d61370f565b505050915050600190565b1561375757565b606460405162461bcd60e51b815260206004820152602060248201527f44617461207374657761726420726f6c65206e6565647320617070726f76616c6044820152fd5b90601f81116137a957505050565b600091825260208220906020601f850160051c830194106137e5575b601f0160051c01915b8281106137da57505050565b8181556001016137ce565b90925082906137c5565b6001600160401b0381116106d45760051b60200190565b6040519061381382612fb9565b816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015260606101008201528261012082015260606101408201520152565b63ffffffff82511663ffffffff19825416178155602090818301516001908183015560408401516002830155606084015160038301556004820160018060a01b036080860151166001600160601b0360a01b82541617905560a0840151600583015560c0840151600683015560e08401516007830155600882016101008501519081516001600160401b03928382116106d457819061390582611b428654612e97565b8790601f8311600114613a3a57600092613a2f575b5050600019600383901b1c191690841b1790555b6101208501516009840155600a8301916101408601519485519283116106d45761395c83611b428654612e97565b80601f84116001146139bf575091808092600b969594610160986000946139b4575b50501b916000199060031b1c19161790555b0191015161399d81612e06565b6139a681612e06565b60ff80198354169116179055565b01519250388061397e565b91939495601f1984168660005283600020936000905b828210613a18575050916101609795939185600b989694106139ff575b505050811b019055613990565b015160001960f88460031b161c191690553880806139f2565b8088869782949787015181550196019401906139d5565b01519050388061391a565b90869350601f1983169185600052896000209260005b8b828210613a875750508411613a6e575b505050811b01905561392e565b015160001960f88460031b161c19169055388080613a61565b8385015186558a97909501949384019301613a50565b600b5490600160401b8210156106d4576001820180600b55821015612e8157600c613aef92600b600052027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901613862565b565b8151815460208085015160408601516001600160d01b031990931663ffffffff949094169390931792811b65ffff00000000169290921760309190911b6601000000000000600160d01b031617825560608301518051949363ffffffff19939092909160018084019290916001600160401b0389116106d457613b7889611b428654612e97565b81601f8a11600114613bed5750978092819260049798999a600094613be2575b50501b916000199060031b1c19161790555b6080830151600282015560a08301516003820155019161ffff60c0830151169063ffff000060e0855494015160101b16921617179055565b015192503880613b98565b909891601f198316998560005282600020926000905b8c8210613c3f57505083600498999a9b10613c26575b505050811b019055613baa565b015160001960f88460031b161c19169055388080613c19565b808785968294968601518155019501930190613c03565b90808214613d2a57613c688154612e97565b906001600160401b0382116106d4578190613c8782611b428654612e97565b600090601f8311600114613cbe57600092613cb3575b50508160011b916000199060031b1c1916179055565b015490503880613c9d565b81526020808220858352818320935090601f1985169083905b828210613d11575050908460019594939210613cf8575b505050811b019055565b015460001960f88460031b161c19169055388080613cee565b8495819295850154815560018091019601940190613cd7565b5050565b815181546020808501516001600160a81b03199092166001600160a01b039384161791151560a01b60ff60a01b169190911783556001600160a01b0319929091606091600291600195868301916040890151169082541617905501930151908151916001600160401b0383116106d457613dac83611dc98754612e97565b81601f8411600114613de55750928293918392600094613dda575b50501b916000199060031b1c1916179055565b015192503880613dc7565b919083601f1981168760005284600020946000905b88838310613e2d5750505010613e1457505050811b019055565b015160001960f88460031b161c19169055388080613cee565b858701518855909601959485019487935090810190613dfa56fea2646970667358221220e520f08d775348b0cfebf28863f3e7ad9a8c0ae883f8907cd8561b239afcf3ac64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816265223914612cd35750806301ffc9a714612c65578063052b6feb14612c3f57806306fdde0314612b9c578063081812fc14612b7e578063095ea7b314612a045780630e183d1e146128525780631b0275601461272f57806323b872dd1461270657806329be76af146126945780633bb3e7151461264c5780633f088df01461244157806342842e0e146124195780634a198119146123f25780634b357ba31461237b57806359420a3914611ff85780635c141bae14611ca45780635d505ff814611a485780636352211e14611a18578063647ed61f146118d357806370a082311461183c578063712e267b146118135780638da5cb5b146117ea57806395d89b411461170b5780639b7a294b146112d35780639ef6f45f14610d62578063a22cb46514610c90578063a7130c7d14610c3c578063ad83796914610a8b578063b8817c65146108a8578063b88d4fde14610847578063c87b56dd146107da578063db2ab36f1461073b578063e5a3fdfe14610613578063e985e9c5146105bd578063e9b2ff7c1461052c578063ea592a0c146104bd578063f99cd9ba146102885763ffbcb41b146101cb57600080fd5b346102835760203660031901126102835763ffffffff806101ea612e52565b16600052600d60205260406000209081541661027f600183015492600281015490600381015460018060a01b036004830154166005830154600684015460078501549160405193610249856102428160088b01612ed1565b0386612ff0565b60098701549560ff600b6040519961026f8b61026881600a8501612ed1565b038c612ff0565b015416986040519c8d9c8d6130f7565b0390f35b600080fd5b34610283576020806003193601126102835763ffffffff90816102a9612e52565b16600052600c9081815260406000209081546102c4816137ef565b936102d26040519586612ff0565b8185528285018094600052836000206000915b8483106103ea575050505050604051928184019082855251809152604084019160408260051b86010193926000965b8388106103215786860387f35b90919293948380600192603f198a8203018652885190858251168152828201518382015260408201516040820152606080830151908201526080858060a01b0381840151169082015260a0808301519082015260c0808301519082015260e082015160e08201526103c56103a661010080850151906101808091860152840190612dc6565b6101208085015190840152610140808501519084830390850152612dc6565b9161016080910151916103d783612e06565b0152970193019701969093929193610314565b838660019260409a989a516103fe81612fb9565b8c865416815284860154838201526002860154604082015260038601546060820152848060a01b036004870154166080820152600586015460a0820152600686015460c0820152600786015460e082015260405161046a816104638160088b01612ed1565b0382612ff0565b610100820152600986015461012082015260405161048f8161046381600a8b01612ed1565b61014082015260ff600b870154166104a681612e06565b6101608201528152019201920191909694966102e5565b3461028357602036600319011261028357600435601454811015610283576104e49061326d565b5080549061027f600260018060a01b039261051784600183015416916105106040518095819301612ed1565b0383612ff0565b60405194859460ff8260a01c16911685613238565b3461028357604036600319011261028357610545612e52565b60243563ffffffff809216600052600c6020526040600020805482101561028357600052600c60206000209102019081541661027f600183015492600281015490600381015460018060a01b036004830154166005830154600684015460078501549160405193610249856102428160088b01612ed1565b34610283576040366003190112610283576105d6612e26565b6105de612e3c565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b3461028357610621366131a3565b60065490926001600160a01b03929091831633036106ea5761066c906040519361064a85612f9e565b6060850193606085521694858552336040860152600160208601523691613201565b9052601454600160401b8110156106d45780600161068d920160145561326d565b9290926106be576106a1826106b394613d2e565b60005260156020526040600020613d2e565b602060405160018152f35b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152602360248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d617920646f207460448201526268697360e81b6064820152608490fd5b3461028357604036600319011261028357610754612e52565b60243563ffffffff809216600052601060205260406000209081548110156102835761077f91612e65565b5061027f8154916040519361079b856102428160018601612ed1565b600282015491600460038201549101549260405196879661ffff9081808860101c1697169560018060a01b038260301c16928260201c16911689613011565b3461028357602036600319011261028357600435600090815260026020526040902054610811906001600160a01b031615156132a8565b600060405161081f81612fd5565b5261027f60405161082f81612fd5565b60008152604051918291602083526020830190612dc6565b3461028357608036600319011261028357610860612e26565b610868612e3c565b606435916001600160401b03831161028357366023840112156102835761089c6108a6933690602481600401359101613201565b91604435916133b7565b005b346102835760203660031901126102835760043560165481101561028357601660005260031b63ffffffff9081817fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b5124289015416907fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428a8101549260018060a01b0390610a71827fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428b85015416927fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428c8501541693604051906109ac82610510817fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428d8501612ed1565b610a5e847fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428e83015416927fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512429060405193610a2b85610242817fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b512428f8501612ed1565b01549760ff8960201c16976040519b8c9b8c5260208c015260408b015260608a01526101208060808b0152890190612dc6565b9160a088015286820360c0880152612dc6565b921660e0840152610a8181612e06565b6101008301520390f35b3461028357602036600319011261028357610aa4612e26565b3360005260156020526040600020610b156001604051610ac381612f9e565b60026060855492610b0a858060a01b0397888616835260ff602084019660a01c16151586528887820154166040840152610b036040518096819301612ed1565b0384612ff0565b015251151514613750565b60075491600160ff8460c01c16151503610bd157163303610b7c5763ffffffff808260a01c16908114610b665763ffffffff60a01b1990911660019190910160a01b63ffffffff60a01b1617600755005b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152602760248201527f44617461207374657761726473206d757374206f776e2074686520696e697469604482015266185b081b5a5b9d60ca1b6064820152608490fd5b60405162461bcd60e51b815260206004820152603c60248201527f436f6e7472616374206973206e6f7420726561647920746f206d696e742e205060448201527f6c6561736520636f6d706c65746520636f6e66696775726174696f6e000000006064820152608490fd5b34610283576020366003190112610283576001600160a01b0380610c5e612e26565b16600052601560205260406000209061027f600283549361051784600183015416916105106040518095819301612ed1565b3461028357604036600319011261028357610ca9612e26565b60243590811515809203610283576001600160a01b031690338214610d1d57336000526005602052604060002082600052602052604060002060ff1981541660ff83161790556040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b346102835761016036600319011261028357610d7c612e52565b6084356001600160a01b0381168103610283576001600160401b03916101043583811161028357610db1903690600401613176565b936101243590811161028357610dcb903690600401613176565b91909460046101443510156102835763ffffffff84166000908152600260205260409020546001600160a01b03161561129657602435604435111561123d57600160ff60405185898237600a868201526020818781010301902054161515036111e057610e3a61014435612e06565b600361014435116111765763ffffffff8416600052600c60205260406000208054610e64816137ef565b91610e726040519384612ff0565b818352602083019060005260206000206000915b8383106110aa57505050505115600014610f38579463ffffffff9392610f01610f0e936106b398610eb5613806565b87891681526024356020820152604435604082015260643560608201526001600160a01b0390991660808a015260a43560a08a015260c43560c08a015260e43560e08a01523691613201565b6101008701523691613201565b6101408401526000610120840152610f2583613a9d565b16600052600d6020526040600020613862565b929193909463ffffffff8316600052600d60205260406000209460018601549560243587036110595760020154604435810361100a576110059763ffffffff96610fcf95610f0193610f88613806565b898b168152602081019b909b5260408b015260643560608b01526001600160a01b031660808a015260a43560a08a015260c43560c08a015260e43560e08a01523691613201565b610140840152610fe161014435612e06565b6101443561016084015216600052600c602052604060002054610120820152613a9d565b6106b3565b60405162461bcd60e51b815260206004820152602160248201527f546f20446174652054696d65206d7573742072656d61696e207468652073616d6044820152606560f81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f46726f6d20446174652054696d65206d7573742072656d61696e207468652073604482015262616d6560e81b6064820152608490fd5b600c60206001926040516110bd81612fb9565b63ffffffff865416815284860154838201526002860154604082015260038601546060820152848060a01b036004870154166080820152600586015460a0820152600686015460c0820152600786015460e0820152604051611126816104638160088b01612ed1565b610100820152600986015461012082015260405161114b8161046381600a8b01612ed1565b61014082015260ff600b8701541661116281612e06565b610160820152815201920192019190610e86565b608460405162461bcd60e51b815260206004820152604060248201527f456d697373696f6e732064617461206d75737420626520636c6173736966696560448201527f642061732073636f70657320312d33206f7220617320756e6b6e6f776e2830296064820152fd5b60405162461bcd60e51b815260206004820152602f60248201527f474847204f7267616e697a6174696f6e20697320756e6b6e6f776e2e20506c6560448201526e185cd9481c9959da5cdd195c881a5d608a1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602b60248201527f66726f6d2d6461746574696d65206d757374206265206c657373207468616e2060448201526a746f2d6461746574696d6560a81b6064820152608490fd5b60405162461bcd60e51b8152602060048201526015602482015274546f6b656e20646f6573206e6f742065786973742160581b6044820152606490fd5b346102835760e0366003190112610283576112ec612e52565b604435906001600160a01b038216820361028357606435916001600160401b0380841161028357366023850112156102835761133360249436908681600401359101613201565b906084359081116102835761134c903690600401613176565b9360c4359261ffff8416809403610283573360005260136020526001604060002060405161137981612f83565b60c06005835493858060a01b038516845260ff602085019560a01c1615158552858060a01b0386820154166040850152858060a01b0360028201541660608501526040516113ce816104638160038601612ed1565b60808501526040516113e7816104638160048601612ed1565b60a08501520154910152511515036116b857600854604051632dd34f0f60e01b81526001600160a01b0387811660048301526060828b01529092602092849216908290849082908c906000908490611443906064860190612dc6565b84810360031901604486015283815292808d8386013783010152601f8d01601f1916010301915afa80156116ac57600090611670575b6001915015150361161e5782906040519261149384612f67565b6000602085015260608401606081526080850190600082526114e660a087019360008552600060c089015263ffffffff60e089019660008852169a8b895260018060a01b038b1660408a01523691613201565b905260a435905242905252600f54600160401b90818110156115f4576001810180600f558110156116095782600561154592600f600052027f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201613af1565b8460005260106020526040600020908154908110156115f45761156d91600182018155612e65565b6115df57916115b9826115a67f224a31073ab9b515cfbd76cfedf93c90b401fccc68ee4e6ed735554da71bf965989460a0989796613af1565b8560005260116020526040600020613af1565b6040519330855260208501526040840152356060830152600180841b03166080820152a1005b85634e487b7160e01b60005260006004526000fd5b86634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260326004526000fd5b60405162461bcd60e51b8152602060048201526025818801527f456d697373696f6e204461746120566572696669636174696f6e20697320696e6044820152641d985b1a5960da1b6064820152608490fd5b506020813d6020116116a4575b8161168a60209383612ff0565b810103126102835751801515810361028357600190611479565b3d915061167d565b6040513d6000823e3d90fd5b60405162461bcd60e51b8152602060048201526026818901527f456d697373696f6e7320566572696669657220526f6c65206e656564732061706044820152651c1c9bdd985b60d21b6064820152608490fd5b34610283576000366003190112610283576040516000600180549061172f82612e97565b808552918181169081156117c3575060011461176a575b61027f8461175681860382612ff0565b604051918291602083526020830190612dc6565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106117ab57505050810160200161175682611746565b80546020858701810191909152909301928101611793565b60ff191660208087019190915292151560051b850190920192506117569150839050611746565b34610283576000366003190112610283576006546040516001600160a01b039091168152602090f35b34610283576000366003190112610283576007546040516001600160a01b039091168152602090f35b34610283576020366003190112610283576001600160a01b0361185d612e26565b16801561187c5760005260036020526020604060002054604051908152f35b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b346102835760203660031901126102835760043560125481101561028357600690601260005202807fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401549061027f60018060a01b0391827fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34458201541690837fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344682015416604051906119ab82610510817fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34478701612ed1565b7fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344960405193611a0085610242817fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34488501612ed1565b01549360405197889760ff8260a01c1691168861309f565b34610283576020366003190112610283576020611a366004356132f4565b6040516001600160a01b039091168152f35b3461028357611a56366131a3565b9060405191611a6483612f83565b602080840190604085019160608601906000825260808701976060895260a088019560608752611ab260c08a019860008a5260018060a01b0380941692838c52338952600086523691613201565b8a526000908152601385526040902097518854925160ff60a01b90151560a01b166001600160a81b031990931690821660ff60a01b1916179190911787556001600160a01b03199060019481868a019151168382541617905560028801925116908254161790556003850195519586516001600160401b03978882116106d4578190611b4882611b428654612e97565b8661379b565b8490601f8311600114611c4157600092611c36575b5050600019600383901b1c191690841b1790555b60048501925180519687116106d457611b8e87611b428654612e97565b81601f8811600114611bcf5750958092819260059798600094611bc4575b50501b916000199060031b1c19161790555b51910155005b015192508880611bac565b909691601f198316978560005282600020926000905b8a8210611c1f575050836005989910611c06575b505050811b019055611bbe565b015160001960f88460031b161c19169055868080611bf9565b808785968294968601518155019501930190611be5565b015190508980611b5d565b90869350601f1983169185600052866000209260005b88828210611c8e5750508411611c75575b505050811b019055611b71565b015160001960f88460031b161c19169055898080611c68565b8385015186558a97909501949384019301611c57565b34610283576040366003190112610283576001600160401b0360043581811161028357611cd5903690600401613176565b909160243581811161028357611cef903690600401613176565b933360005260209160158352604060002094611d53604051611d1081612f9e565b87546002606060018060a01b0393848416815260ff8a82019460a01c1615158452610b0a60019c8d9687820154166040840152610b036040518096819301612ed1565b604051926060840190848210878311176106d457859160405260608552611d988286019460608652604087019a60608c52611d8f368786613201565b88523691613201565b84528260405193849283378101600981520301902091518051908582116106d4578190611dcf82611dc98754612e97565b8761379b565b8590601f8311600114611f9557600092611f8a575b5050600019600383901b1c191690861b1782555b518051828601918582116106d457611e1a82611e148554612e97565b8561379b565b8490601f8311600114611f225760029493929160009183611f17575b5050600019600383901b1c191690871b1790555b01935180519283116106d457611e6483611dc98754612e97565b81601f8411600114611eb15750928293918392600094611ea6575b50501b916000199060031b1c19161790555b6007805460ff60c01b1916600160c01b179055005b015192508580611e7f565b919083601f1981168760005284600020946000905b88838310611efd5750505010611ee4575b505050811b019055611e91565b015160001960f88460031b161c19169055838080611ed7565b858701518855909601959485019487935090810190611ec6565b015190508980611e36565b9392918791601f1982169084600052876000209160005b89828210611f74575050968360029810611f5b575b505050811b019055611e4a565b015160001960f88460031b161c19169055898080611f4e565b838a015185558c96909401939283019201611f39565b015190508880611de4565b90889350601f1983169186600052876000209260005b89828210611fe25750508411611fc9575b505050811b018255611df8565b015160001960f88460031b161c19169055888080611fbc565b8385015186558c97909501949384019301611fab565b3461028357612006366131a3565b9091600091336000526020916013835260406000209060c06040519561202b87612f83565b8354600560018060a01b039582878094168b5260ff8a8c019160a01c161515815260019a8b96879484878780970154166040850152876002820154166060850152604051612080816104638160038601612ed1565b6080850152604051612099816104638160048601612ed1565b60a085015201549101523360005260158a52600260608b6120f4604060002060ff604051936120c785612f9e565b82549a8b16855284019960a01c16151589528c87820154166040840152610b036040518096819301612ed1565b01525115151491821561236e575b5050612367575b151503612303578116933385146122ac578460005260138452604060002090600160a01b60ff60a01b19835416178255600582019442865560028301966001600160601b0360a01b9533878a541617895560038501996001600160401b0382116106d4576121818261217b8d54612e97565b8d61379b565b600090601f83116001146122435760139493929160009183612238575b5050600019600383901b1c191690851b178a555b600052526040600020968288036121c557005b82548854861690851617808955835460ff60a01b1990911660a091821c60ff16151590911b60ff60a01b16178855600596612232956004956122289481818d0191880154168382541617905560028b019254169082541617905560038801613c56565b0160048501613c56565b54910155005b013590508c8061219e565b918591949392601f198216908d600052856000209160005b818110612295575096836013981061227b575b505050811b018a556121b2565b0135600019600384901b60f8161c191690558c808061226e565b82890135845597870197899590930192870161225b565b60405162461bcd60e51b815260048101859052602960248201527f536f7272792e2043616e6e6f742073656c662d617070726f766520766572696660448201526834b2b9103937b6329760b91b6064820152608490fd5b60405162461bcd60e51b815260048101859052603660248201527f446174612073746577617264206f7220656d697373696f6e7320766572696669604482015275195c881c9bdb19481b9959591cc8185c1c1c9bdd985b60521b6064820152608490fd5b5080612109565b511515149050828a612102565b346102835760203660031901126102835763ffffffff8061239a612e52565b16600052600e60205260406000209081541661027f600183015492600281015490600381015460018060a01b036004830154166005830154600684015460078501549160405193610249856102428160088b01612ed1565b3461028357600036600319011261028357602063ffffffff60075460a01c16604051908152f35b34610283576108a661242a3661306a565b906040519261243884612fd5565b600084526133b7565b3461028357602036600319011261028357600435600b5481101561028357600c90600b6000520263ffffffff817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901541661027f7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba830154927f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb810154907f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbc81015460018060a01b037f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbd830154167f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbe8301547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbf8401547f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc085015491604051936125d085610242817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc18b01612ed1565b7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc28701549560ff7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc46040519961026f8b610268817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dc38501612ed1565b346102835760203660031901126102835763ffffffff8061266b612e52565b166000526011602052604060002061027f8154916040519361079b856102428160018601612ed1565b34610283576020366003190112610283576001600160a01b03806126b6612e26565b16600052601360205260406000209061027f825492826001820154169083600282015416604051906126ef826105108160038701612ed1565b600560405193611a00856102428160048501612ed1565b34610283576108a66127173661306a565b9161272a6127258433613452565b613355565b61351a565b3461028357602036600319011261028357600435600f5481101561028357600590600f60005202807f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80201549061027f604051916127b283610b03817f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8038501612ed1565b7f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac804810154937f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8067f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8058301549201549160405195869561ffff80808760101c1696169463ffffffff60018060a01b038260301c16928260201c16911689613011565b34610283576020806003193601126102835763ffffffff9081612873612e52565b16600052601090818152604060002090815461288e816137ef565b9361289c6040519586612ff0565b81855260009384528284208386019491855b848410612979575050505050604051928184019082855251809152604084019160408260051b86010193926000965b8388106128ea5786860387f35b90919293948380600192603f198a820301865288519085825116815260e061ffff80858501511685840152868060a01b03604085015116604084015281612941606080870151906101008091880152860190612dc6565b946080808201519086015260a0808201519086015260c0838183015116908601520151169101529701930197019690939291936128dd565b60058660019260409a989a5161298e81612f67565b86548d8116825261ffff908181861c1685840152868060a01b039060301c1660408301526040516129c581610463818a8d01612ed1565b606083015260028801546080830152600388015460a0830152600488015481811660c0840152871c1660e08201528152019301930192919694966128ae565b3461028357604036600319011261028357612a1d612e26565b602435906001600160a01b038080612a34856132f4565b16921691808314612b2f57803314908115612b0a575b5015612a9f57600083815260046020526040902080546001600160a01b03191683179055612a77836132f4565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4005b60405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608490fd5b9050600052600560205260406000203360005260205260ff6040600020541684612a4a565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b34610283576020366003190112610283576020611a36600435613317565b346102835760003660031901126102835760405160008054612bbd81612e97565b808452906001908181169081156117c35750600114612be65761027f8461175681860382612ff0565b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410612c2757505050810160200161175682611746565b80546020858701810191909152909301928101612c0f565b3461028357600036600319011261028357602060ff60075460c01c166040519015158152f35b346102835760203660031901126102835760043563ffffffff60e01b8116809103610283576020906380ac58cd60e01b8114908115612cc2575b8115612cb1575b506040519015158152f35b6301ffc9a760e01b14905082612ca6565b635b5e139f60e01b81149150612c9f565b34610283576000366003190112610283576020908181019180825260608051809452604083019360408160051b8501019260809586936000975b848910612d1a5787870388f35b9091929394958480600192603f198b820301875289519063ffffffff82511681528282015183820152604082015160408201528682015187820152848060a01b0386830151168682015260a0808301519082015260c0808301519082015260e082015160e0820152612da06103a661010080850151906101808091860152840190612dc6565b916101608091015191612db283612e06565b015298019401980197919094939294612d0d565b919082519283825260005b848110612df2575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612dd1565b60041115612e1057565b634e487b7160e01b600052602160045260246000fd5b600435906001600160a01b038216820361028357565b602435906001600160a01b038216820361028357565b6004359063ffffffff8216820361028357565b8054821015612e81576000526005602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c92168015612ec7575b6020831014612eb157565b634e487b7160e01b600052602260045260246000fd5b91607f1691612ea6565b9060009291805491612ee283612e97565b918282526001938481169081600014612f445750600114612f04575b50505050565b90919394506000526020928360002092846000945b838610612f30575050505001019038808080612efe565b805485870183015294019385908201612f19565b9294505050602093945060ff191683830152151560051b01019038808080612efe565b61010081019081106001600160401b038211176106d457604052565b60e081019081106001600160401b038211176106d457604052565b608081019081106001600160401b038211176106d457604052565b61018081019081106001600160401b038211176106d457604052565b602081019081106001600160401b038211176106d457604052565b90601f801991011681019081106001600160401b038211176106d457604052565b969192949897936130539063ffffffff60e0989316895261ffff968780961660208b015260018060a01b031660408a01526101008060608b0152890190612dc6565b98608088015260a08701521660c085015216910152565b6060906003190112610283576001600160a01b0390600435828116810361028357916024359081168103610283579060443590565b6001600160a01b039182168152911515602083015291821660408201529116606082015260e0608082018190529094939260c0926130f2926130e49190880190612dc6565b9086820360a0880152612dc6565b930152565b9c9b9a96929360608e6101609c9a96613153999563ffffffff6131689e9a9616835260208301526040820152015260018060a01b031660808d015260a08c015260c08b015260e08a0152610180806101008b0152890190612dc6565b91610120880152868203610140880152612dc6565b9361317283612e06565b0152565b9181601f84011215610283578235916001600160401b038311610283576020838186019501011161028357565b906040600319830112610283576004356001600160a01b03811681036102835791602435906001600160401b038211610283576131e291600401613176565b9091565b6001600160401b0381116106d457601f01601f191660200190565b92919261320d826131e6565b9161321b6040519384612ff0565b829481845281830111610283578281602093846000960137010152565b6001600160a01b0391821681529115156020830152909116604082015260806060820181905261326a92910190612dc6565b90565b601454811015612e81576003906014600052027fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0190600090565b156132af57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152600260205260409020546001600160a01b031661326a8115156132a8565b60008181526002602052604090205461333a906001600160a01b031615156132a8565b6000908152600460205260409020546001600160a01b031690565b1561335c57565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b906133db9392916133cb6127258433613452565b6133d683838361351a565b61362b565b156133e257565b60405162461bcd60e51b8152806133fb600482016133ff565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b906001600160a01b038080613466846132f4565b16931691838314938415613499575b508315613483575b50505090565b61348f91929350613317565b161438808061347d565b909350600052600560205260406000208260005260205260ff604060002054169238613475565b156134c757565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b9061354291613528846132f4565b6001600160a01b03939184169284929091831684146134c0565b169182156135da578161355f91613558866132f4565b16146134c0565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008481526004602052604081206001600160601b0360a01b9081815416905583825260036020526040822060001981540190558482526040822060018154019055858252600260205284604083209182541617905580a4565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9293600093909291803b15613745579484916136859660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190612dc6565b0393165af1849181613701575b506136f0575050503d6000146136e8573d6136ac816131e6565b906136ba6040519283612ff0565b81528091833d92013e5b805191826136e55760405162461bcd60e51b8152806133fb600482016133ff565b01fd5b5060606136c4565b6001600160e01b0319161492509050565b9091508581813d831161373e575b6137198183612ff0565b8101031261373a57516001600160e01b03198116810361373a579038613692565b8480fd5b503d61370f565b505050915050600190565b1561375757565b606460405162461bcd60e51b815260206004820152602060248201527f44617461207374657761726420726f6c65206e6565647320617070726f76616c6044820152fd5b90601f81116137a957505050565b600091825260208220906020601f850160051c830194106137e5575b601f0160051c01915b8281106137da57505050565b8181556001016137ce565b90925082906137c5565b6001600160401b0381116106d45760051b60200190565b6040519061381382612fb9565b816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015260606101008201528261012082015260606101408201520152565b63ffffffff82511663ffffffff19825416178155602090818301516001908183015560408401516002830155606084015160038301556004820160018060a01b036080860151166001600160601b0360a01b82541617905560a0840151600583015560c0840151600683015560e08401516007830155600882016101008501519081516001600160401b03928382116106d457819061390582611b428654612e97565b8790601f8311600114613a3a57600092613a2f575b5050600019600383901b1c191690841b1790555b6101208501516009840155600a8301916101408601519485519283116106d45761395c83611b428654612e97565b80601f84116001146139bf575091808092600b969594610160986000946139b4575b50501b916000199060031b1c19161790555b0191015161399d81612e06565b6139a681612e06565b60ff80198354169116179055565b01519250388061397e565b91939495601f1984168660005283600020936000905b828210613a18575050916101609795939185600b989694106139ff575b505050811b019055613990565b015160001960f88460031b161c191690553880806139f2565b8088869782949787015181550196019401906139d5565b01519050388061391a565b90869350601f1983169185600052896000209260005b8b828210613a875750508411613a6e575b505050811b01905561392e565b015160001960f88460031b161c19169055388080613a61565b8385015186558a97909501949384019301613a50565b600b5490600160401b8210156106d4576001820180600b55821015612e8157600c613aef92600b600052027f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901613862565b565b8151815460208085015160408601516001600160d01b031990931663ffffffff949094169390931792811b65ffff00000000169290921760309190911b6601000000000000600160d01b031617825560608301518051949363ffffffff19939092909160018084019290916001600160401b0389116106d457613b7889611b428654612e97565b81601f8a11600114613bed5750978092819260049798999a600094613be2575b50501b916000199060031b1c19161790555b6080830151600282015560a08301516003820155019161ffff60c0830151169063ffff000060e0855494015160101b16921617179055565b015192503880613b98565b909891601f198316998560005282600020926000905b8c8210613c3f57505083600498999a9b10613c26575b505050811b019055613baa565b015160001960f88460031b161c19169055388080613c19565b808785968294968601518155019501930190613c03565b90808214613d2a57613c688154612e97565b906001600160401b0382116106d4578190613c8782611b428654612e97565b600090601f8311600114613cbe57600092613cb3575b50508160011b916000199060031b1c1916179055565b015490503880613c9d565b81526020808220858352818320935090601f1985169083905b828210613d11575050908460019594939210613cf8575b505050811b019055565b015460001960f88460031b161c19169055388080613cee565b8495819295850154815560018091019601940190613cd7565b5050565b815181546020808501516001600160a81b03199092166001600160a01b039384161791151560a01b60ff60a01b169190911783556001600160a01b0319929091606091600291600195868301916040890151169082541617905501930151908151916001600160401b0383116106d457613dac83611dc98754612e97565b81601f8411600114613de55750928293918392600094613dda575b50501b916000199060031b1c1916179055565b015192503880613dc7565b919083601f1981168760005284600020946000905b88838310613e2d5750505010613e1457505050811b019055565b015160001960f88460031b161c19169055388080613cee565b858701518855909601959485019487935090810190613dfa56fea2646970667358221220e520f08d775348b0cfebf28863f3e7ad9a8c0ae883f8907cd8561b239afcf3ac64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2694,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2696,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "anchorContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2698,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "latestTokenID",
        "offset": 20,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 2700,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "readyToMint",
        "offset": 24,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2703,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "verifier",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(VerifySignature)4114"
      },
      {
        "astId": 2765,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "registeredGHGOrg",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_struct(ghgOrganization)3781_storage)"
      },
      {
        "astId": 2769,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "isGHGOrg",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 2773,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "publicEmissionsDisclosure",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(emissionsData)3807_storage)dyn_storage"
      },
      {
        "astId": 2779,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "allPedsByTokenID",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint32,t_array(t_struct(emissionsData)3807_storage)dyn_storage)"
      },
      {
        "astId": 2784,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "latestPedByTokenID",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint32,t_struct(emissionsData)3807_storage)"
      },
      {
        "astId": 2789,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "latestVerifiedPedByTokenID",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint32,t_struct(emissionsData)3807_storage)"
      },
      {
        "astId": 2793,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "publicEmissionsVerifications",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(emissionsVerification)3824_storage)dyn_storage"
      },
      {
        "astId": 2799,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "pevsByTokenID",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint32,t_array(t_struct(emissionsVerification)3824_storage)dyn_storage)"
      },
      {
        "astId": 2804,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "latestPevByTokenID",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint32,t_struct(emissionsVerification)3824_storage)"
      },
      {
        "astId": 2808,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "emissionsVerifiers",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(emissionsVerifier)3839_storage)dyn_storage"
      },
      {
        "astId": 2813,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "emissionsVerifiersByAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(emissionsVerifier)3839_storage)"
      },
      {
        "astId": 2817,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "dataStewards",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_struct(dataSteward)3848_storage)dyn_storage"
      },
      {
        "astId": 2822,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "dataStewardsByAddress",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_struct(dataSteward)3848_storage)"
      },
      {
        "astId": 2826,
        "contract": "contracts/emissionsNFT.sol:emissionsNFT",
        "label": "scope3vreqs",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_struct(scope3VerificationRequest)3873_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(dataSteward)3848_storage)dyn_storage": {
        "base": "t_struct(dataSteward)3848_storage",
        "encoding": "dynamic_array",
        "label": "struct iEmissionsNFT.dataSteward[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(emissionsData)3807_storage)dyn_storage": {
        "base": "t_struct(emissionsData)3807_storage",
        "encoding": "dynamic_array",
        "label": "struct iEmissionsNFT.emissionsData[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(emissionsVerification)3824_storage)dyn_storage": {
        "base": "t_struct(emissionsVerification)3824_storage",
        "encoding": "dynamic_array",
        "label": "struct iEmissionsNFT.emissionsVerification[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(emissionsVerifier)3839_storage)dyn_storage": {
        "base": "t_struct(emissionsVerifier)3839_storage",
        "encoding": "dynamic_array",
        "label": "struct iEmissionsNFT.emissionsVerifier[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(scope3VerificationRequest)3873_storage)dyn_storage": {
        "base": "t_struct(scope3VerificationRequest)3873_storage",
        "encoding": "dynamic_array",
        "label": "struct iEmissionsNFT.scope3VerificationRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(VerifySignature)4114": {
        "encoding": "inplace",
        "label": "contract VerifySignature",
        "numberOfBytes": "20"
      },
      "t_enum(carbonScopeLevel)3774": {
        "encoding": "inplace",
        "label": "enum iEmissionsNFT.carbonScopeLevel",
        "numberOfBytes": "1"
      },
      "t_enum(scope3vreqStatusEnum)3853": {
        "encoding": "inplace",
        "label": "enum iEmissionsNFT.scope3vreqStatusEnum",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(dataSteward)3848_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct iEmissionsNFT.dataSteward)",
        "numberOfBytes": "32",
        "value": "t_struct(dataSteward)3848_storage"
      },
      "t_mapping(t_address,t_struct(emissionsVerifier)3839_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct iEmissionsNFT.emissionsVerifier)",
        "numberOfBytes": "32",
        "value": "t_struct(emissionsVerifier)3839_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ghgOrganization)3781_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct iEmissionsNFT.ghgOrganization)",
        "numberOfBytes": "32",
        "value": "t_struct(ghgOrganization)3781_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_array(t_struct(emissionsData)3807_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct iEmissionsNFT.emissionsData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(emissionsData)3807_storage)dyn_storage"
      },
      "t_mapping(t_uint32,t_array(t_struct(emissionsVerification)3824_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct iEmissionsNFT.emissionsVerification[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(emissionsVerification)3824_storage)dyn_storage"
      },
      "t_mapping(t_uint32,t_struct(emissionsData)3807_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct iEmissionsNFT.emissionsData)",
        "numberOfBytes": "32",
        "value": "t_struct(emissionsData)3807_storage"
      },
      "t_mapping(t_uint32,t_struct(emissionsVerification)3824_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct iEmissionsNFT.emissionsVerification)",
        "numberOfBytes": "32",
        "value": "t_struct(emissionsVerification)3824_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(dataSteward)3848_storage": {
        "encoding": "inplace",
        "label": "struct iEmissionsNFT.dataSteward",
        "members": [
          {
            "astId": 3841,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "dataStewardAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3843,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "acknowledDataSteward",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3845,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "addedBy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3847,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "ghgOrgID",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(emissionsData)3807_storage": {
        "encoding": "inplace",
        "label": "struct iEmissionsNFT.emissionsData",
        "members": [
          {
            "astId": 3783,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "tokenID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3785,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "fromDateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3787,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "toDateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3789,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "co2eAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 3791,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "emissionsOrigin",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3793,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "publicIPFSCID",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 3795,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "protectedIPFSCID",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 3797,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "sapcapDataHash",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 3799,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "emissionsVaultID",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 3801,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "adjustmentID",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3803,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "reportingGHGOrgID",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 3806,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scopeLevel",
            "offset": 0,
            "slot": "11",
            "type": "t_enum(carbonScopeLevel)3774"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(emissionsVerification)3824_storage": {
        "encoding": "inplace",
        "label": "struct iEmissionsNFT.emissionsVerification",
        "members": [
          {
            "astId": 3809,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "tokenID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3811,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "tokenVerificationID",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 3813,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "verifierDID",
            "offset": 6,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3815,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "verifierSignature",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3817,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "verifiedOnDateTime1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3819,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "verifiedOnDateTime2",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3821,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "verificationCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          },
          {
            "astId": 3823,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "currentAdjustmentID",
            "offset": 2,
            "slot": "4",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(emissionsVerifier)3839_storage": {
        "encoding": "inplace",
        "label": "struct iEmissionsNFT.emissionsVerifier",
        "members": [
          {
            "astId": 3826,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "emissionsVerifierAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3828,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "acknowledgedVerifer",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3830,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "requestedBy",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3832,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "addedBy",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3834,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "subjectGHGOrgID",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3836,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "verificationOrgID",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3838,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "acknowledgedOn",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ghgOrganization)3781_storage": {
        "encoding": "inplace",
        "label": "struct iEmissionsNFT.ghgOrganization",
        "members": [
          {
            "astId": 3776,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "ghgOrganizationID",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3778,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "ghgOrganizationName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3780,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "privateHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(scope3VerificationRequest)3873_storage": {
        "encoding": "inplace",
        "label": "struct iEmissionsNFT.scope3VerificationRequest",
        "members": [
          {
            "astId": 3855,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "internalID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3857,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope3VReqID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3859,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope3Contract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3861,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope1Contract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3863,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope3GHGOrgID",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3865,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope3TokenID",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 3867,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope1GHGOrgID",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3869,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope1TokenID",
            "offset": 0,
            "slot": "7",
            "type": "t_uint32"
          },
          {
            "astId": 3872,
            "contract": "contracts/emissionsNFT.sol:emissionsNFT",
            "label": "scope3vreqStatus",
            "offset": 4,
            "slot": "7",
            "type": "t_enum(scope3vreqStatusEnum)3853"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}